from telegram import Update, InputFile, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from config import ADMIN_ID
import db
import os
from utils import is_admin, IMAGES_DIR, logger

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    registered = db.register_user(user.id, user.username, user.full_name)
    msg_id = f"–í–∞—à Telegram ID: {user.id}\n"
    if is_admin(user.id):
        keyboard = [["/tour", "/hc"], ["/send_tour_image", "/addhc", "/send_results", "/add_player", "/list_players"]]
        msg = (
            f'–ü—Ä–∏–≤–µ—Ç, {user.full_name}! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä Fantasy KHL.\n\n'
            '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/tour ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –Ω–∞ —Ç—É—Ä\n/hc ‚Äî –±–∞–ª–∞–Ω—Å HC\n/send_tour_image ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—É—Ä–∞\n/addhc ‚Äî –Ω–∞—á–∏—Å–ª–∏—Ç—å HC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n/send_results ‚Äî —Ä–∞–∑–æ—Å–ª–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—É—Ä–∞\n/add_player ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞\n/list_players ‚Äî —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤'
        )
    else:
        keyboard = [["/tour", "/hc"]]
        msg = (
            f'–ü—Ä–∏–≤–µ—Ç, {user.full_name}! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Fantasy KHL.\n\n'
            '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/tour ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –Ω–∞ —Ç—É—Ä\n/hc ‚Äî –±–∞–ª–∞–Ω—Å HC'
        )
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    if registered:
        await message.reply_text(msg_id + msg, reply_markup=markup)
    else:
        await message.reply_text(msg_id + '–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!', reply_markup=markup)

# --- TOUR ConversationHandler states ---
TOUR_START, TOUR_FORWARD_1, TOUR_FORWARD_2, TOUR_FORWARD_3, TOUR_DEFENDER_1, TOUR_DEFENDER_2, TOUR_GOALIE, TOUR_CAPTAIN = range(8)

async def tour_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–ª—è Update –∏ CallbackQuery)
    message = getattr(update, "effective_message", None)
    if message is None and hasattr(update, "message"):
        message = update.message
    elif message is None and hasattr(update, "callback_query"):
        message = update.callback_query.message
    # 1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç—É—Ä–∞ –∏ –≤–≤–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –±—é–¥–∂–µ—Ç–æ–º
    budget = db.get_budget() or 0
    roster = db.get_tour_roster_with_player_info()
    forwards = [p for p in roster if p[3].lower() == '–Ω–∞–ø–∞–¥–∞—é—â–∏–π']
    defenders = [p for p in roster if p[3].lower() == '–∑–∞—â–∏—Ç–Ω–∏–∫']
    goalies = [p for p in roster if p[3].lower() == '–≤—Ä–∞—Ç–∞—Ä—å']
    context.user_data['tour_budget'] = budget
    context.user_data['tour_roster'] = roster
    context.user_data['tour_selected'] = {
        'forwards': [],
        'defenders': [],
        'goalie': None,
        'captain': None,
        'spent': 0
    }
    context.user_data['tour_selected'] = {'forwards': [], 'defenders': [], 'goalie': None, 'captain': None, 'spent': 0}
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try:
        tour_img_path = None
        tour_img_txt = os.path.join(os.getcwd(), 'latest_tour.txt')
        if os.path.exists(tour_img_txt):
            with open(tour_img_txt, 'r') as f:
                fname = f.read().strip()
                if fname:
                    fpath = os.path.join(IMAGES_DIR, fname)
                    if os.path.exists(fpath):
                        tour_img_path = fpath
        if not tour_img_path:
            # fallback: last by name
            files = [f for f in os.listdir(IMAGES_DIR) if f.lower().endswith((".jpg", ".jpeg", ".png"))]
            if files:
                tour_img_path = os.path.join(IMAGES_DIR, sorted(files)[-1])
        if tour_img_path:
            with open(tour_img_path, 'rb') as img:
                await update.message.reply_photo(photo=InputFile(img))
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—É—Ä–∞: {e}')
    # –í–≤–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    intro = (
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Ç—É—Ä. –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–∞–≤:\n"
        "3 –Ω–∞–ø–∞–¥–∞—é—â–∏—Ö\n2 –∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤\n1 –≤—Ä–∞—Ç–∞—Ä—è\n\n1 –∫–∞–ø–∏—Ç–∞–Ω (–∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö)\n\n"
        f"üí∞ –í–∞—à –±—é–¥–∂–µ—Ç: {budget} HC"
    )
    await message.reply_text(intro)
    # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–ø–∞–¥–∞—é—â–µ–≥–æ!
    return await tour_forward_1(update, context)

from telegram import InlineKeyboardMarkup, InlineKeyboardButton

async def send_player_choice(update, context, position, exclude_ids, next_state, budget):
    from telegram import InlineKeyboardMarkup, InlineKeyboardButton
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º message –¥–ª—è reply_text
    message = getattr(update, "effective_message", None)
    if message is None and hasattr(update, "message"):
        message = update.message
    elif message is None and hasattr(update, "callback_query"):
        message = update.callback_query.message
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç–µ—Ä
    roster = context.user_data['tour_roster']
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º
    players = [p for p in roster if p[3].lower() == position and p[1] not in exclude_ids and p[7] <= budget]
    if not players:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç HC –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        text = (
            'üö® –í—ã –ø—Ä–∏–≤—ã—Å–∏–ª–∏ –ø–æ—Ç–æ–ª–æ–∫ –∑–∞—Ä–ø–ª–∞—Ç. –ü–µ—Ä–µ—Å–æ–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–∞–≤, —á—Ç–æ–±—ã –≤–ø–∏—Å–∞—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç.'
        )
        keyboard = [
            [InlineKeyboardButton('–ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å —Å–æ—Å—Ç–∞–≤', callback_data='restart_tour')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await message.reply_text(text, reply_markup=reply_markup)
        return ConversationHandler.END
    keyboard = []
    for p in players:
        btn_text = f"{p[2]} ‚Äî {p[7]} HC"
        keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"pick_{p[1]}_{position}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = f"–í—ã–±–µ—Ä–∏—Ç–µ {position} (–æ—Å—Ç–∞–ª–æ—Å—å HC: {budget})"
    await message.reply_text(text, reply_markup=reply_markup)
    return next_state
    keyboard = []
    for p in players:
        btn_text = f"{p[2]} ‚Äî {p[7]} HC"
        keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"pick_{p[1]}_{position}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = f"–í—ã–±–µ—Ä–∏—Ç–µ {position} (–æ—Å—Ç–∞–ª–æ—Å—å HC: {budget})"
    await message.reply_text(text, reply_markup=reply_markup)
    return next_state

async def tour_forward_1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    budget = context.user_data['tour_budget']
    picked = context.user_data['tour_selected']['forwards']
    return await send_player_choice(update, context, '–Ω–∞–ø–∞–¥–∞—é—â–∏–π', picked, TOUR_FORWARD_2, budget)


async def tour_forward_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        data = query.data
        print(f"Callback data: {data}", flush=True)
        # –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç pick_<player_id>_–Ω–∞–ø–∞–¥–∞—é—â–∏–π
        if not data.startswith('pick_') or '_–Ω–∞–ø–∞–¥–∞—é—â–∏–π' not in data:
            await query.edit_message_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.')
            return TOUR_FORWARD_1
        pid = int(data.split('_')[1])
        # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ –ø–æ id
        roster = context.user_data['tour_roster']
        player = next((p for p in roster if p[1] == pid), None)
        if not player:
            await query.edit_message_text('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return TOUR_FORWARD_1
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—é–¥–∂–µ—Ç
        budget = context.user_data['tour_budget']
        spent = context.user_data['tour_selected']['spent']
        if spent + player[7] > budget:
            await query.edit_message_text(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ HC –¥–ª—è –≤—ã–±–æ—Ä–∞ {player[1]}!')
            return TOUR_FORWARD_1
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
        context.user_data['tour_selected']['forwards'].append(pid)
        context.user_data['tour_selected']['spent'] += player[7]
        left = budget - context.user_data['tour_selected']['spent']
        await query.edit_message_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {player[2]} ({player[7]} HC)\n–û—Å—Ç–∞–ª–æ—Å—å HC: {left}')
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫–æ –≤—Ç–æ—Ä–æ–º—É –∏–ª–∏ —Ç—Ä–µ—Ç—å–µ–º—É –Ω–∞–ø–∞–¥–∞—é—â–µ–º—É
        if len(context.user_data['tour_selected']['forwards']) == 1:
            print("tour_forward_callback SUCCESS: –ø–µ—Ä–µ—Ö–æ–¥ –∫ tour_forward_2", flush=True)
            return await tour_forward_2(update, context)
        elif len(context.user_data['tour_selected']['forwards']) == 2:
            print("tour_forward_callback SUCCESS: –ø–µ—Ä–µ—Ö–æ–¥ –∫ tour_forward_3", flush=True)
            return await tour_forward_3(update, context)
        elif len(context.user_data['tour_selected']['forwards']) == 3:
            print("tour_forward_callback SUCCESS: –ø–µ—Ä–µ—Ö–æ–¥ –∫ tour_defender_1", flush=True)
            await tour_defender_1(update, context)
            return TOUR_DEFENDER_1
    except Exception as e:
        print(f"tour_forward_callback ERROR: {e}", flush=True)
        logger.exception("Exception in tour_forward_callback")
        await query.edit_message_text(f"–û—à–∏–±–∫–∞: {e}")
        return TOUR_FORWARD_1
    finally:
        print("tour_forward_callback FINISHED", flush=True)


async def tour_forward_2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    budget = context.user_data['tour_budget']
    spent = context.user_data['tour_selected']['spent']
    left = budget - spent
    picked = context.user_data['tour_selected']['forwards']
    return await send_player_choice(update, context, '–Ω–∞–ø–∞–¥–∞—é—â–∏–π', picked, TOUR_FORWARD_3, left)


async def tour_forward_3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    budget = context.user_data['tour_budget']
    spent = context.user_data['tour_selected']['spent']
    left = budget - spent
    picked = context.user_data['tour_selected']['forwards']
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ –Ω–∞–ø–∞–¥–∞—é—â–µ–≥–æ, next_state ‚Äî TOUR_FORWARD_3
    return await send_player_choice(update, context, '–Ω–∞–ø–∞–¥–∞—é—â–∏–π', picked, TOUR_FORWARD_3, left)

async def tour_defender_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        data = query.data
        print(f"Callback data: {data}", flush=True)
        # –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç pick_<player_id>_–∑–∞—â–∏—Ç–Ω–∏–∫
        if not data.startswith('pick_') or '_–∑–∞—â–∏—Ç–Ω–∏–∫' not in data:
            await query.edit_message_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.')
            return TOUR_DEFENDER_1
        pid = int(data.split('_')[1])
        roster = context.user_data['tour_roster']
        player = next((p for p in roster if p[1] == pid), None)
        if not player:
            await query.edit_message_text('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return TOUR_DEFENDER_1
        budget = context.user_data['tour_budget']
        spent = context.user_data['tour_selected']['spent']
        if spent + player[7] > budget:
            await query.edit_message_text(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ HC –¥–ª—è –≤—ã–±–æ—Ä–∞ {player[1]}!')
            return TOUR_DEFENDER_1
        context.user_data['tour_selected']['defenders'].append(pid)
        context.user_data['tour_selected']['spent'] += player[7]
        left = budget - context.user_data['tour_selected']['spent']
        await query.edit_message_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {player[2]} ({player[7]} HC)\n–û—Å—Ç–∞–ª–æ—Å—å HC: {left}')
        if len(context.user_data['tour_selected']['defenders']) == 1:
            print("tour_defender_callback SUCCESS: –ø–µ—Ä–µ—Ö–æ–¥ –∫ tour_defender_2", flush=True)
            return await tour_defender_2(update, context)
        elif len(context.user_data['tour_selected']['defenders']) == 2:
            print("tour_defender_callback SUCCESS: –ø–µ—Ä–µ—Ö–æ–¥ –∫ tour_goalie", flush=True)
            await tour_goalie(update, context)
            return TOUR_GOALIE
    except Exception as e:
        print(f"tour_defender_callback ERROR: {e}", flush=True)
        logger.exception("Exception in tour_defender_callback")
        await query.edit_message_text(f"–û—à–∏–±–∫–∞: {e}")
        return TOUR_DEFENDER_1
    finally:
        print("tour_defender_callback FINISHED", flush=True)


async def tour_defender_1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    budget = context.user_data['tour_budget']
    spent = context.user_data['tour_selected']['spent']
    left = budget - spent
    picked = context.user_data['tour_selected']['defenders']
    return await send_player_choice(update, context, '–∑–∞—â–∏—Ç–Ω–∏–∫', picked, TOUR_DEFENDER_2, left)

async def tour_defender_2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    budget = context.user_data['tour_budget']
    spent = context.user_data['tour_selected']['spent']
    left = budget - spent
    picked = context.user_data['tour_selected']['defenders']
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∑–∞—â–∏—Ç–Ω–∏–∫–∞, next_state ‚Äî TOUR_DEFENDER_2
    return await send_player_choice(update, context, '–∑–∞—â–∏—Ç–Ω–∏–∫', picked, TOUR_DEFENDER_2, left)

async def tour_goalie_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        data = query.data
        print(f"Callback data: {data}", flush=True)
        # –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç pick_<player_id>_–≤—Ä–∞—Ç–∞—Ä—å
        if not data.startswith('pick_') or '_–≤—Ä–∞—Ç–∞—Ä—å' not in data:
            await query.edit_message_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.')
            return TOUR_GOALIE
        pid = int(data.split('_')[1])
        roster = context.user_data['tour_roster']
        player = next((p for p in roster if p[1] == pid), None)
        if not player:
            await query.edit_message_text('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return TOUR_GOALIE
        budget = context.user_data['tour_budget']
        spent = context.user_data['tour_selected']['spent']
        if spent + player[7] > budget:
            await query.edit_message_text(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ HC –¥–ª—è –≤—ã–±–æ—Ä–∞ {player[1]}!')
            return TOUR_GOALIE
        context.user_data['tour_selected']['goalie'] = pid
        context.user_data['tour_selected']['spent'] += player[7]
        left = budget - context.user_data['tour_selected']['spent']
        await query.edit_message_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {player[2]} ({player[7]} HC)\n–û—Å—Ç–∞–ª–æ—Å—å HC: {left}')
        # –î–∞–ª—å—à–µ ‚Äî –≤—ã–±–æ—Ä –∫–∞–ø–∏—Ç–∞–Ω–∞
        return TOUR_CAPTAIN
    except Exception as e:
        print(f"tour_goalie_callback ERROR: {e}", flush=True)
        logger.exception("Exception in tour_goalie_callback")
        await query.edit_message_text(f"–û—à–∏–±–∫–∞: {e}")
        return TOUR_GOALIE
    finally:
        print("tour_goalie_callback FINISHED", flush=True)


async def tour_goalie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    budget = context.user_data['tour_budget']
    spent = context.user_data['tour_selected']['spent']
    left = budget - spent
    picked = []
    # –í—Ä–∞—Ç–∞—Ä—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω, –Ω–µ –Ω—É–∂–µ–Ω exclude –∫—Ä–æ–º–µ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
    if context.user_data['tour_selected']['goalie']:
        picked = [context.user_data['tour_selected']['goalie']]
    return await send_player_choice(update, context, '–≤—Ä–∞—Ç–∞—Ä—å', picked, TOUR_CAPTAIN, left)


async def tour_captain(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from telegram import InlineKeyboardMarkup, InlineKeyboardButton
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º message –¥–ª—è reply_text
    message = getattr(update, "effective_message", None)
    if message is None and hasattr(update, "message"):
        message = update.message
    elif message is None and hasattr(update, "callback_query"):
        message = update.callback_query.message

    selected = context.user_data['tour_selected']
    roster = context.user_data['tour_roster']
    # –°–æ–±–∏—Ä–∞–µ–º id –ø–æ–ª–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    field_ids = selected['forwards'] + selected['defenders']
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É –ø–æ –∏–≥—Ä–æ–∫–∞–º
    candidates = [p for p in roster if p[1] in field_ids]
    keyboard = [
        [InlineKeyboardButton(f"{p[2]} ({p[3]})", callback_data=f"pick_captain_{p[1]}")]
        for p in candidates
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = "–ù–∞–∑–Ω–∞—á—å –æ–¥–Ω–æ–≥–æ –ø–æ–ª–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–æ—Å—Ç–∞–≤–∞ –∫–∞–ø–∏—Ç–∞–Ω–æ–º. –ï–≥–æ –∏—Ç–æ–≥–æ–≤—ã–µ –æ—á–∫–∏ —É–º–Ω–æ–∂–∏–º –Ω–∞ 1.5"
    await message.reply_text(text, reply_markup=reply_markup)
    return TOUR_CAPTAIN

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞–ø–∏—Ç–∞–Ω–∞ ---
async def tour_captain_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if not data.startswith('pick_captain_'):
        await query.edit_message_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞–ø–∏—Ç–∞–Ω–∞.')
        return TOUR_CAPTAIN
    captain_id = int(data.replace('pick_captain_', ''))
    context.user_data['tour_selected']['captain'] = captain_id
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤
    selected = context.user_data['tour_selected']
    roster = context.user_data['tour_roster']
    def get_name(pid):
        p = next((x for x in roster if x[1]==pid), None)
        return f"{p[2]} ({p[3]})" if p else str(pid)
    text = "\n".join([
        "–í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π —Å–æ—Å—Ç–∞–≤:",
        f"–ù–∞–ø–∞–¥–∞—é—â–∏–µ: {', '.join(get_name(pid) for pid in selected['forwards'])}",
        f"–ó–∞—â–∏—Ç–Ω–∏–∫–∏: {', '.join(get_name(pid) for pid in selected['defenders'])}",
        f"–í—Ä–∞—Ç–∞—Ä—å: {get_name(selected['goalie'])}",
        f"\n–ö–∞–ø–∏—Ç–∞–Ω: {get_name(captain_id)} (–æ—á–∫–∏ x1.5)"
    ])
    await query.edit_message_text(text)
    return ConversationHandler.END


async def restart_tour_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ —Å–æ—Å—Ç–∞–≤–∞ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /tour (ConversationHandler entry_point)
    await context.bot.send_message(chat_id=query.message.chat_id, text="/tour")
    return ConversationHandler.END

async def hc(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    data = db.get_user_by_id(user.id)
    if data:
        await message.reply_text(f'üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {data[3]} HC')
    else:
        await message.reply_text('–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')
