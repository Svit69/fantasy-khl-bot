from telegram import Update, InputFile, ReplyKeyboardMarkup, MessageEntity, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.error import BadRequest
from telegram.constants import MessageEntityType
from telegram.ext import ContextTypes, ConversationHandler
from config import ADMIN_ID
import db
import os
from utils import is_admin, IMAGES_DIR, logger, CHALLENGE_IMAGE_PATH_FILE

def escape_md(text):
    # –í—Å–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã MarkdownV2
    for ch in r'\_*[]()~`>#+-=|{}.!':
        text = text.replace(ch, '\\' + ch)
    return text

async def send_player_selected_message(query, player, budget, context):
    left = budget - context.user_data['tour_selected']['spent']
    player_name = escape_md(str(player[2]))
    cost = escape_md(str(player[7]))
    left_str = escape_md(str(left))
    msg = f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {player_name} \\({cost}\\)\n\n*–û—Å—Ç–∞–≤—à–∏–π—Å—è –±—é–¥–∂–µ—Ç: {left_str}*'
    await query.edit_message_text(msg, parse_mode="MarkdownV2")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º message –¥–ª—è reply_text
    message = getattr(update, "effective_message", None)
    if message is None and hasattr(update, "message"):
        message = update.message
    elif message is None and hasattr(update, "callback_query"):
        message = update.callback_query.message
    user = update.effective_user
    registered = db.register_user(user.id, user.username, user.full_name)

    # --- –†–µ—Ñ–µ—Ä–∞–ª: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à—ë–ª –ø–æ —Å—Å—ã–ª–∫–µ ref_<id>,
    # –∏ —ç—Ç–æ –µ–≥–æ –ü–ï–†–í–ê–Ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (registered == True), –Ω–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä—É +50 HC
    try:
        if registered and getattr(context, 'args', None):
            arg0 = context.args[0] if len(context.args) > 0 else ''
            if isinstance(arg0, str) and arg0.startswith('ref_'):
                ref_str = arg0[4:]
                if ref_str.isdigit():
                    referrer_id = int(ref_str)
                    if referrer_id != user.id:
                        # –í—Å—Ç–∞–≤–∏–º –∑–∞–ø–∏—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞, –µ—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ user_id –µ—ë –µ—â—ë –Ω–µ –±—ã–ª–æ
                        if db.add_referral_if_new(user.id, referrer_id):
                            # –ë–æ–Ω—É—Å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                            try:
                                from db import is_subscription_active
                                bonus = 100 if is_subscription_active(referrer_id) else 50
                            except Exception:
                                bonus = 50
                            db.update_hc_balance(referrer_id, bonus)
                            # –£–≤–µ–¥–æ–º–∏–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ (–µ—Å–ª–∏ –º–æ–∂–Ω–æ)
                            try:
                                new_balance = db.get_user_by_id(referrer_id)
                                new_balance = new_balance[3] if new_balance else '‚Äî'
                                await context.bot.send_message(
                                    chat_id=referrer_id,
                                    text=f'üéâ –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫!\n+{bonus} HC –Ω–∞—á–∏—Å–ª–µ–Ω–æ. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} HC.'
                                )
                            except Exception:
                                pass
                            # –°–æ–æ–±—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –æ–Ω –ø—Ä–∏—à—ë–ª –ø–æ —Å—Å—ã–ª–∫–µ
                            try:
                                await message.reply_text('–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ ‚Äî –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')
                            except Exception:
                                pass
    except Exception as e:
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        try:
            await message.reply_text(f"[WARN] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {e}")
        except Exception:
            pass
    msg_id = f"–í–∞—à Telegram ID: {user.id}\n"
    if is_admin(user.id):
        keyboard = [["/tour", "/hc"], ["/send_tour_image", "/addhc", "/send_results", "/add_player", "/list_players"]]
        msg = (
            f'–ü—Ä–∏–≤–µ—Ç, {user.full_name}! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä Fantasy KHL.\n\n'
            '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/tour ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –Ω–∞ —Ç—É—Ä\n/hc ‚Äî –±–∞–ª–∞–Ω—Å HC\n/send_tour_image ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—É—Ä–∞\n/addhc ‚Äî –Ω–∞—á–∏—Å–ª–∏—Ç—å HC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n/send_results ‚Äî —Ä–∞–∑–æ—Å–ª–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—É—Ä–∞\n/add_player ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞\n/list_players ‚Äî —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤'
        )
    else:
        keyboard = [["/tour", "/hc", "/rules", "/shop"]]
        msg = (
            f'–ü—Ä–∏–≤–µ—Ç, {user.full_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–µ–Ω—Ç–µ–∑–∏ –î—Ä–∞—Ñ—Ç –ö–•–õ\n\n'
            'üî∏ –°–æ–±–∏—Ä–∞–π —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∫–∞–∂–¥—ã–π —Ç—É—Ä\n'
            'üî∏ –°–ª–µ–¥–∏ –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç—É—Ä–æ–≤\n'
            'üî∏ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∏ –∫–æ–ø–∏ Hockey Coin (HC)\n'
            'üî∏ –ú–µ–Ω—è–π Hockey Coin (HC) –Ω–∞ –ø—Ä–∏–∑—ã\n\n'
            '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
            '/tour ‚Äî —Ç—É—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π\n'
            '/hc ‚Äî —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å Hockey Coin\n'
            '/rules ‚Äî –ø—Ä–∞–≤–∏–ª–∞ —Å–±–æ—Ä–∫–∏ —Å–æ—Å—Ç–∞–≤–æ–≤\n'
            '/shop ‚Äî –º–∞–≥–∞–∑–∏–Ω –ø—Ä–∏–∑–æ–≤'
        )
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    if registered:
        await message.reply_text(msg_id + msg, reply_markup=markup)
    else:
        await message.reply_text(
            escape_md("‚ö†Ô∏è –¢—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –≥–µ–Ω–µ—Ä–∞–ª—å–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –§–µ–Ω—Ç–µ–∑–∏ –î—Ä–∞—Ñ—Ç–∞ –ö–•–õ.\n\n–§–æ—Ä–º–∏—Ä—É–π —Å–æ—Å—Ç–∞–≤ –∏ —Å–ª–µ–¥–∏ –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç—É—Ä–æ–≤ - /tour"),
            reply_markup=markup,
            parse_mode="MarkdownV2"
        )

# --- TOUR ConversationHandler states ---

async def referral(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    bot_username = (await context.bot.get_me()).username
    link = f"https://t.me/{bot_username}?start=ref_{user.id}"
    # –û–ø—Ä–µ–¥–µ–ª–∏–º —Ç–µ–∫—É—â–∏–π –±–æ–Ω—É—Å: 100 HC –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ, –∏–Ω–∞—á–µ 50 HC
    try:
        from db import is_subscription_active
        bonus = 100 if is_subscription_active(user.id) else 50
    except Exception:
        bonus = 50
    text = (
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"{link}\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π! –ó–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ +{bonus} HC –ø–æ—Å–ª–µ –µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
    )
    keyboard = [[InlineKeyboardButton('–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', url=link)]]
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))


async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    from utils import create_yookassa_payment
    user = update.effective_user
    payment_url, payment_id = create_yookassa_payment(user.id)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º payment_id –≤ –ë–î (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é)
    # db.save_payment_id(user.id, payment_id)
    text = (
        f"üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Fantasy KHL</b>\n\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>299 —Ä—É–±/–º–µ—Å—è—Ü</b>\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –ÆKassa. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    )
    keyboard = [[InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å 299‚ÇΩ —á–µ—Ä–µ–∑ –ÆKassa', url=payment_url)]]
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="HTML")


# --- CHALLENGE ---
async def challenge_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    # –¢–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    try:
        from db import is_subscription_active
        if not is_subscription_active(user.id):
            await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É: /subscribe")
            return
    except Exception:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ /subscribe.")
        return

    # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π: –≤—Å–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–∞–∫—Ç–∏–≤–µ–Ω" –∏ "–≤ –∏–≥—Ä–µ". –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π "–∑–∞–≤–µ—Ä—à–µ–Ω".
    challenges = []
    try:
        challenges = db.get_all_challenges() or []
    except Exception:
        challenges = []

    active_or_play = [c for c in challenges if len(c) > 5 and c[5] in ("–∞–∫—Ç–∏–≤–µ–Ω", "–≤ –∏–≥—Ä–µ")]
    last_finished = None
    if challenges:
        # –≤—ã–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø–æ end_date
        try:
            import datetime
            finished = [c for c in challenges if len(c) > 5 and c[5] == "–∑–∞–≤–µ—Ä—à–µ–Ω"]
            def parse_iso(s):
                try:
                    return datetime.datetime.fromisoformat(str(s))
                except Exception:
                    return datetime.datetime.min
            if finished:
                last_finished = sorted(finished, key=lambda c: parse_iso(c[3]) or datetime.datetime.min)[-1]
        except Exception:
            pass

    list_to_show = active_or_play if active_or_play else ([last_finished] if last_finished else [])

    if not list_to_show:
        await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ–ª–ª–µ–Ω–¥–∂–µ–π. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ.")
        return

    lines = ["*–î–æ—Å—Ç—É–ø–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏:*"]
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: ISO -> —Ç–µ–∫—Å—Ç –≤ –ú–°–ö (Europe/Moscow)
    def iso_to_msk_text(dt_str: str) -> str:
        import datetime as _dt
        months = [
            "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
            "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
        ]
        if not dt_str:
            return ""
        try:
            dt = _dt.datetime.fromisoformat(str(dt_str))
        except Exception:
            return str(dt_str)
        # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ —Ö—Ä–∞–Ω–∏–º–æ–µ –≤—Ä–µ–º—è ‚Äî UTC (–Ω–∞–∏–≤–Ω–æ–µ -> –ø—Ä–æ—Å—Ç–∞–≤–∏–º UTC)
        if dt.tzinfo is None:
            dt = dt.replace(tzinfo=_dt.timezone.utc)
        else:
            dt = dt.astimezone(_dt.timezone.utc)
        # –ü–µ—Ä–µ–≤–æ–¥ –≤ –ú–°–ö
        try:
            from zoneinfo import ZoneInfo  # Python 3.9+
            msk = dt.astimezone(ZoneInfo("Europe/Moscow"))
        except Exception:
            # –§–æ–ª–±—ç–∫: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π UTC+3 (–ú–æ—Å–∫–≤–∞ –±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞)
            msk = dt.astimezone(_dt.timezone(_dt.timedelta(hours=3)))
        day = msk.day
        month_name = months[msk.month - 1]
        time_part = msk.strftime("%H:%M")
        return f"{day} {month_name} {time_part} (–º—Å–∫)"
    buttons = []
    for c in list_to_show:
        # c: (id, start, deadline, end, image_filename, status, [image_file_id])
        cid = c[0]
        deadline = c[2]
        end = c[3]
        status = c[5] if len(c) > 5 else ''
        if status == '–∑–∞–≤–µ—Ä—à–µ–Ω':
            line = f"üî∫ ‚Ññ{cid} [–∑–∞–≤–µ—Ä—à–µ–Ω] –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
        elif status == '–≤ –∏–≥—Ä–µ':
            line = f"üîπ ‚Ññ{cid} [–Ω–∞—á–∞–ª—Å—è] –ø–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤: {iso_to_msk_text(end)}"
        elif status == '–∞–∫—Ç–∏–≤–µ–Ω':
            line = f"üî∏ ‚Ññ{cid} [—Å–±–æ—Ä —Å–æ—Å—Ç–∞–≤–æ–≤] –¥–µ–¥–ª–∞–π–Ω —Å–±–æ—Ä–∫–∏ —Å–æ—Å—Ç–∞–≤–∞: {iso_to_msk_text(deadline)}"
        else:
            line = f"‚Ññ{cid} [{status}]"
        lines.append(line)
        buttons.append([InlineKeyboardButton(f"–û—Ç–∫—Ä—ã—Ç—å #{cid}", callback_data=f"challenge_open_{cid}")])

    await update.message.reply_text("\n\n".join(lines), reply_markup=InlineKeyboardMarkup(buttons), parse_mode='Markdown')


async def challenge_open_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    try:
        cid = int(data.replace("challenge_open_", ""))
    except Exception:
        await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —á–µ–ª–ª–µ–Ω–¥–∂–∞.")
        return

    # –ù–∞–π–¥–µ–º —á–µ–ª–ª–µ–Ω–¥–∂ –ø–æ id
    ch = None
    try:
        rows = db.get_all_challenges() or []
        for r in rows:
            if r[0] == cid:
                ch = r
                break
    except Exception:
        ch = None
    if not ch:
        await query.edit_message_text("–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —á–µ–ª–ª–µ–Ω–¥–∂–∞ –∫–∞–∫ —Ñ–æ—Ç–æ
    image_sent = False
    image_file_id = ch[6] if len(ch) >= 7 else ''
    if image_file_id:
        try:
            await context.bot.send_photo(chat_id=update.effective_chat.id, photo=image_file_id)
            image_sent = True
        except Exception:
            logger.warning("send_photo by file_id failed in open_callback", exc_info=True)
    if not image_sent:
        try:
            fname = ch[4] if len(ch) > 4 else ''
            if fname:
                fpath = os.path.join(IMAGES_DIR, fname)
                if os.path.exists(fpath):
                    with open(fpath, 'rb') as fp:
                        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=InputFile(fp, filename=fname))
                        image_sent = True
        except Exception:
            logger.error("send_photo from local file failed in open_callback", exc_info=True)

    # –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –ø–æ —á–µ–ª–ª–µ–Ω–¥–∂—É
    status = ch[5] if len(ch) > 5 else ''
    text = (
        f"–ß–µ–ª–ª–µ–Ω–¥–∂ #{ch[0]}\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"–°—Ç–∞—Ä—Ç: {ch[1]}\n–î–µ–¥–ª–∞–π–Ω: {ch[2]}\n–û–∫–æ–Ω—á–∞–Ω–∏–µ: {ch[3]}"
    )
    buttons = [[InlineKeyboardButton("–ò–Ω—Ñ–æ", callback_data=f"challenge_info_{ch[0]}")]]
    if status == "–∞–∫—Ç–∏–≤–µ–Ω":
        buttons.append([InlineKeyboardButton("–°–æ–±—Ä–∞—Ç—å —Å–æ—Å—Ç–∞–≤", callback_data=f"challenge_build_{ch[0]}")])
    await context.bot.send_message(chat_id=update.effective_chat.id, text=text, reply_markup=InlineKeyboardMarkup(buttons))


async def challenge_info_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        cid = int(query.data.replace("challenge_info_", ""))
    except Exception:
        await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
        return
    # –ù–∞–π–¥–µ–º —á–µ–ª–ª–µ–Ω–¥–∂
    ch = None
    try:
        rows = db.get_all_challenges() or []
        for r in rows:
            if r[0] == cid:
                ch = r
                break
    except Exception:
        ch = None
    if not ch:
        await query.edit_message_text("–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    status = ch[5] if len(ch) > 5 else ''
    txt = (
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —á–µ–ª–ª–µ–Ω–¥–∂—É #{ch[0]}\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"–°—Ç–∞—Ä—Ç: {ch[1]}\n–î–µ–¥–ª–∞–π–Ω: {ch[2]}\n–û–∫–æ–Ω—á–∞–Ω–∏–µ: {ch[3]}\n\n"
        f"–ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å '–∞–∫—Ç–∏–≤–µ–Ω' ‚Äî –º–æ–∂–µ—Ç–µ —Å–æ–±—Ä–∞—Ç—å —Å–æ—Å—Ç–∞–≤."
    )
    await query.edit_message_text(txt)

def _parse_shop_items(text: str):
    items = []
    if not text:
        return items
    lines = [l.strip() for l in text.splitlines() if l.strip()]
    for line in lines:
        if not (line.startswith('üî∏') or line.startswith('‚Ä¢') or line.startswith('-')):
            continue
        # –£–±–∏—Ä–∞–µ–º –º–∞—Ä–∫–µ—Ä
        raw = line.lstrip('üî∏').lstrip('‚Ä¢').lstrip('-').strip()
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–æ–µ —Ç–∏—Ä–µ –∏–ª–∏ –¥–µ—Ñ–∏—Å
        sep = '‚Äî' if '‚Äî' in raw else (' - ' if ' - ' in raw else '-')
        if sep not in raw:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            continue
        name, price = raw.split(sep, 1)
        name = name.strip()
        price = price.strip()
        if name:
            items.append((name, price))
    return items

async def shop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞–≥–∞–∑–∏–Ω–∞: —Ç–µ–∫—Å—Ç + –∫–∞—Ä—Ç–∏–Ω–∫–∞ + –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤."""
    try:
        text, image_filename, image_file_id = db.get_shop_content()
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞: {e}")
        return
    if not text and not image_filename and not image_file_id:
        await update.message.reply_text("–ú–∞–≥–∞–∑–∏–Ω –ø–æ–∫–∞ –ø—É—Å—Ç. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ.")
        return
    # –ü–æ—Å—Ç—Ä–æ–∏–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    items = _parse_shop_items(text or '')
    buttons = []
    for idx, (name, price) in enumerate(items, start=1):
        label = f"{name} ‚Äî {price}"
        buttons.append([InlineKeyboardButton(label, callback_data=f"shop_item_{idx}")])
    reply_markup = InlineKeyboardMarkup(buttons) if buttons else None
    caption = text if text else None
    # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ file_id
    if image_file_id:
        try:
            await context.bot.send_photo(chat_id=update.effective_chat.id, photo=image_file_id, caption=caption, reply_markup=reply_markup)
            return
        except Exception:
            logger.warning("send_photo by file_id failed in /shop", exc_info=True)
    # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    if image_filename:
        fpath = os.path.join(IMAGES_DIR, image_filename)
        if os.path.exists(fpath):
            try:
                with open(fpath, 'rb') as fp:
                    await context.bot.send_photo(chat_id=update.effective_chat.id, photo=InputFile(fp, filename=image_filename), caption=caption, reply_markup=reply_markup)
                    return
            except Exception:
                logger.error("send_photo from local file failed in /shop", exc_info=True)
    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
    if caption:
        await update.message.reply_text(caption, reply_markup=reply_markup)
    else:
        await update.message.reply_text("–ú–∞–≥–∞–∑–∏–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

async def shop_item_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data  # shop_item_<n>
    try:
        await query.edit_message_reply_markup(reply_markup=query.message.reply_markup)
    except BadRequest as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º 'Message is not modified'
        if 'Message is not modified' not in str(e):
            raise
    try:
        idx = int(data.replace('shop_item_', ''))
    except Exception:
        idx = None
    # –ü–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–Ω–æ–≤–æ –∏–∑ –ë–î
    try:
        text, _, _ = db.get_shop_content()
    except Exception as e:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞: {e}")
        return
    items = _parse_shop_items(text or '')
    if not idx or idx < 1 or idx > len(items):
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞.")
        return
    name, price_str = items[idx - 1]
    # –ò–∑–≤–ª–µ—á—ë–º —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ü–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, '35 000 HC' -> 35000)
    digits = ''.join(ch for ch in price_str if ch.isdigit())
    try:
        price = int(digits) if digits else 0
    except Exception:
        price = 0
    # –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = update.effective_user
    balance = 0
    try:
        row = db.get_user_by_id(user.id)
        if row and len(row) > 3 and isinstance(row[3], (int, float)):
            balance = int(row[3])
        elif row and len(row) > 3:
            # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
            try:
                balance = int(str(row[3]))
            except Exception:
                balance = 0
    except Exception:
        balance = 0
    if price <= 0:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–¢–æ–≤–∞—Ä: {name}\n–¶–µ–Ω–∞: {price_str}\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ü–µ–Ω—É. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    if balance < price:
        need = price - balance
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=(
                f"–¢–æ–≤–∞—Ä: {name}\n–¶–µ–Ω–∞: {price_str}\n\n"
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {need} HC.\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É /subscribe –∑–∞ 299 —Ä—É–±/–º–µ—Å—è—Ü, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å HC."
            )
        )
        return
    # –ë–∞–ª–∞–Ω—Å–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=(
            f"–¢–æ–≤–∞—Ä: {name}\n–¶–µ–Ω–∞: {price_str}\n\n"
            f"–£ –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ HC (–±–∞–ª–∞–Ω—Å: {balance} HC). –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º."
        )
    )
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞(–æ–≤)
    try:
        admin_text = (
            "üõí –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} (@{user.username or '-'}, id={user.id})\n"
            f"–¢–æ–≤–∞—Ä: {name}\n"
            f"–¶–µ–Ω–∞: {price_str}\n"
            f"–ë–∞–ª–∞–Ω—Å: {balance} HC\n"
        )
        await context.bot.send_message(chat_id=ADMIN_ID, text=admin_text)
    except Exception:
        logger.warning("Failed to notify admin about shop purchase", exc_info=True)


async def challenge_build_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        cid = int(query.data.replace("challenge_build_", ""))
    except Exception:
        await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
        return
    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –∞–∫—Ç–∏–≤–µ–Ω
    ch = None
    try:
        rows = db.get_all_challenges() or []
        for r in rows:
            if r[0] == cid:
                ch = r
                break
    except Exception:
        ch = None
    if not ch:
        await query.edit_message_text("–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    status = ch[5] if len(ch) > 5 else ''
    if status != "–∞–∫—Ç–∏–≤–µ–Ω":
        await query.edit_message_text("–°–±–æ—Ä —Å–æ—Å—Ç–∞–≤–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: —á–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
        return

    # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –º–µ—Ö–∞–Ω–∏–∫—É: –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –≤—ã–∑–æ–≤–∞
    text = (
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤—ã–∑–æ–≤–∞ –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞:\n\n"
        "‚ö°Ô∏è 50 HC\n‚ö°Ô∏è 100 HC\n‚ö°Ô∏è 500 HC"
    )
    keyboard = [
        [
            InlineKeyboardButton('‚ö°Ô∏è 50 HC', callback_data='challenge_level_50'),
            InlineKeyboardButton('‚ö°Ô∏è 100 HC', callback_data='challenge_level_100'),
            InlineKeyboardButton('‚ö°Ô∏è 500 HC', callback_data='challenge_level_500'),
        ]
    ]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))


async def challenge_level_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    level = data.replace('challenge_level_', '')
    try:
        level_int = int(level)
    except Exception:
        await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤—ã–∑–æ–≤–∞.")
        return
    user = update.effective_user
    user_row = db.get_user_by_id(user.id)
    balance = user_row[3] if user_row else 0
    if balance < level_int:
        text = (
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ HC –¥–ª—è —É—Ä–æ–≤–Ω—è {level_int} HC.\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} HC.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤—ã–∑–æ–≤–∞:"
        )
        keyboard = [
            [
                InlineKeyboardButton('‚ö°Ô∏è 50 HC', callback_data='challenge_level_50'),
                InlineKeyboardButton('‚ö°Ô∏è 100 HC', callback_data='challenge_level_100'),
                InlineKeyboardButton('‚ö°Ô∏è 500 HC', callback_data='challenge_level_500'),
            ]
        ]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return
    # –ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—ã–±–æ—Ä
    context.user_data['challenge_level'] = level_int
    await query.edit_message_text(
        f"–£—Ä–æ–≤–µ–Ω—å –≤—ã–∑–æ–≤–∞ –≤—ã–±—Ä–∞–Ω: {level_int} HC. –ë–∞–ª–∞–Ω—Å: {balance} HC. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ç—Ä—ë—Ö –∏–≥—Ä–æ–∫–æ–≤ (—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è)."
    )


TOUR_START, TOUR_FORWARD_1, TOUR_FORWARD_2, TOUR_FORWARD_3, TOUR_DEFENDER_1, TOUR_DEFENDER_2, TOUR_GOALIE, TOUR_CAPTAIN, PREMIUM_TEAM, PREMIUM_POSITION = range(10)

async def tour_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–ª—è Update –∏ CallbackQuery)
    message = getattr(update, "effective_message", None)
    if message is None and hasattr(update, "message"):
        message = update.message
    elif message is None and hasattr(update, "callback_query"):
        message = update.callback_query.message

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    try:
        from db import is_subscription_active
        user = update.effective_user
        if not is_subscription_active(user.id):
            await message.reply_text(
                "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –û—Ñ–æ—Ä–º–∏—Ç–µ –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥–æ–π /subscribe, –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
            )
            return ConversationHandler.END
    except Exception:
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –Ω–æ –¥–∞—ë–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        try:
            await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe.")
        except Exception:
            pass

    # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä ---
    from db import get_active_tour
    active_tour = get_active_tour()
    if not active_tour:
        await message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–∞ –¥–ª—è —Å–±–æ—Ä–∞ —Å–æ—Å—Ç–∞–≤–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return ConversationHandler.END
async def tour_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from telegram import InlineKeyboardMarkup, InlineKeyboardButton
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–ª—è Update –∏ CallbackQuery)
    message = getattr(update, "effective_message", None)
    if message is None and hasattr(update, "message"):
        message = update.message
    elif message is None and hasattr(update, "callback_query"):
        message = update.callback_query.message

    # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä ---
    from db import get_active_tour, get_user_tour_roster, get_player_by_id
    active_tour = get_active_tour()
    if not active_tour:
        await message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—É—Ä–∞ –¥–ª—è —Å–±–æ—Ä–∞ —Å–æ—Å—Ç–∞–≤–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return ConversationHandler.END
    context.user_data['active_tour_id'] = active_tour['id']

    user_id = update.effective_user.id
    tour_id = active_tour['id']
    user_roster = get_user_tour_roster(user_id, tour_id)
    if user_roster and user_roster.get('roster'):
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–∞–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞
        def format_user_roster_md(roster_data):
            from utils import escape_md
            roster = roster_data['roster']
            captain_id = roster_data.get('captain_id')
            spent = roster_data.get('spent', 0)
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É –ø–æ –∏–≥—Ä–æ–∫–∞–º
            goalie = get_player_by_id(roster.get('goalie'))
            defenders = [get_player_by_id(pid) for pid in roster.get('defenders', [])]
            forwards = [get_player_by_id(pid) for pid in roster.get('forwards', [])]
            def fmt(p):
                if not p: return "-"
                return f"{p[1]} ({p[3]})"
            g_str = escape_md(fmt(goalie))
            d_str = escape_md(f"{fmt(defenders[0])} - {fmt(defenders[1])}") if len(defenders) == 2 else "-"
            f_str = escape_md(f"{fmt(forwards[0])} - {fmt(forwards[1])} - {fmt(forwards[2])}") if len(forwards) == 3 else "-"
            captain = None
            for p in [goalie] + defenders + forwards:
                if p and p[0] == captain_id:
                    captain = fmt(p)
            cap_str = f"–ö–∞–ø–∏—Ç–∞–Ω: {escape_md(captain)}" if captain else "–ö–∞–ø–∏—Ç–∞–Ω: -"
            lines = [
                '*–í–∞—à —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Å–æ—Å—Ç–∞–≤:*',
                '',
                g_str,
                d_str,
                f_str,
                '',
                cap_str,
                f'–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: *{escape_md(str(spent))}* HC'
            ]
            return '\n'.join(lines)

        text = format_user_roster_md(user_roster)
        keyboard = [[InlineKeyboardButton('–ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å —Å–æ—Å—Ç–∞–≤', callback_data='restart_tour')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await message.reply_text(text, reply_markup=reply_markup, parse_mode="MarkdownV2")
        return ConversationHandler.END

    # --- –ï—Å–ª–∏ —Å–æ—Å—Ç–∞–≤–∞ –Ω–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—ã–±–æ—Ä–∞ ---
    # 1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Ç—É—Ä–∞ –∏ –≤–≤–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –±—é–¥–∂–µ—Ç–æ–º
    budget = db.get_budget() or 0
    roster = db.get_tour_roster_with_player_info()
    forwards = [p for p in roster if p[3].lower() == '–Ω–∞–ø–∞–¥–∞—é—â–∏–π']
    defenders = [p for p in roster if p[3].lower() == '–∑–∞—â–∏—Ç–Ω–∏–∫']
    goalies = [p for p in roster if p[3].lower() == '–≤—Ä–∞—Ç–∞—Ä—å']
    context.user_data['tour_budget'] = budget
    context.user_data['tour_roster'] = roster
    context.user_data['tour_selected'] = {
        'forwards': [],
        'defenders': [],
        'goalie': None,
        'captain': None,
        'spent': 0
    }
    context.user_data['tour_selected'] = {'forwards': [], 'defenders': [], 'goalie': None, 'captain': None, 'spent': 0}
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try:
        tour_img_path = None
        tour_img_txt = os.path.join(os.getcwd(), 'latest_tour.txt')
        if os.path.exists(tour_img_txt):
            with open(tour_img_txt, 'r') as f:
                fname = f.read().strip()
                if fname:
                    fpath = os.path.join(IMAGES_DIR, fname)
                    if os.path.exists(fpath):
                        tour_img_path = fpath
        if not tour_img_path:
            # fallback: last by name
            files = [f for f in os.listdir(IMAGES_DIR) if f.lower().endswith((".jpg", ".jpeg", ".png"))]
            if files:
                tour_img_path = os.path.join(IMAGES_DIR, sorted(files)[-1])
        if tour_img_path:
            with open(tour_img_path, 'rb') as img:
                await update.message.reply_photo(photo=InputFile(img))
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—É—Ä–∞: {e}')
    # –í–≤–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–µ–¥–ª–∞–π–Ω–∞
    deadline = active_tour.get('deadline', '')
    deadline_str = str(deadline).replace('.', '\\.')
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç —Å MarkdownV2
    intro = rf"""*–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–∏–π —Ç—É—Ä\!* –í—ã–±–µ—Ä–∏ –∫ —Å–µ–±–µ –≤ —Å–æ—Å—Ç–∞–≤:
üî∏3 –Ω–∞–ø–∞–¥–∞—é—â–∏—Ö
üî∏2 –∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤
üî∏1 –≤—Ä–∞—Ç–∞—Ä—è

–ù–∞–∑–Ω–∞—á—å –æ–¥–Ω–æ–≥–æ –ø–æ–ª–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–æ—Å—Ç–∞–≤–∞ –∫–∞–ø–∏—Ç–∞–Ω–æ–º \(–µ–≥–æ –æ—á–∫–∏ —É–º–Ω–æ–∂–∏–º –Ω–∞ —Ö1\.5\)

*–í–∞—à –±—é–¥–∂–µ—Ç: {budget}*

–ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–∞–≤—ã –¥–æ: {deadline_str}"""

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ ‚Äî –¥–æ–±–∞–≤–∏–º –±–ª–æ–∫ –ø—Ä–æ –ø—Ä–µ–º–∏—É–º
    try:
        from db import is_subscription_active
        if is_subscription_active(update.effective_user.id):
            premium_line = "\n\nüíé  –ü—Ä–µ–º–∏—É–º: —É —Ç–µ–±—è –¥–æ—Å—Ç—É–ø–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å ‚Äî \\+1 –∏–≥—Ä–æ–∫ –≤ –ø—É–ª \\(" \
                           "+ –¥–æ—Å—Ç—É–ø–Ω–æ: 1/1 \\) –í—ã–±–∏—Ä–∞–π —Å —É–º–æ–º!"
            # –ò—Å–ø—Ä–∞–≤–∏–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –±–µ–∑ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            premium_line = "\n\nüíé  –ü—Ä–µ–º–∏—É–º: —É —Ç–µ–±—è –¥–æ—Å—Ç—É–ø–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å ‚Äî \\+1 –∏–≥—Ä–æ–∫ –≤ –ø—É–ª \\(" \
                           "–¥–æ—Å—Ç—É–ø–Ω–æ: 1/1\\) –í—ã–±–∏—Ä–∞–π —Å —É–º–æ–º\\!"
            intro = intro + premium_line
    except Exception:
        pass

    await message.reply_text(intro, parse_mode="MarkdownV2")
    # –î–ª—è –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ–Ω—É—Å–∞
    try:
        from db import is_subscription_active
        if is_subscription_active(update.effective_user.id):
            print("[DEBUG] tour_start: user has active subscription, showing premium button")
            kb = InlineKeyboardMarkup(
                [[InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –ø—É–ª', callback_data='premium_add_pool')]]
            )
            sent = await message.reply_text('üíé –ü—Ä–µ–º–∏—É–º-–æ–ø—Ü–∏—è', reply_markup=kb)
            try:
                # –ó–∞–ø–æ–º–Ω–∏–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ id —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–º–∏—É–º-–∫–Ω–æ–ø–∫–æ–π
                context.user_data['premium_button_chat_id'] = sent.chat_id
                context.user_data['premium_button_message_id'] = sent.message_id
                print(f"[DEBUG] tour_start: premium button message_id={sent.message_id}")
            except Exception as e:
                print(f"[WARN] tour_start: failed to store premium button ids: {e}")
    except Exception:
        pass
    # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–ø–∞–¥–∞—é—â–µ–≥–æ!
    return await tour_forward_1(update, context)


async def premium_add_pool_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –ø—Ä–µ–º–∏—É–º-–∫–Ω–æ–ø–∫–∏: —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ñ–ª–∞–≥ –≤ user_data
    query = update.callback_query
    try:
        print(f"[DEBUG] premium_add_pool_callback: received callback data={query.data}")
    except Exception:
        pass
    await query.answer()
    try:
        from db import is_subscription_active
        if not is_subscription_active(update.effective_user.id):
            print("[DEBUG] premium_add_pool_callback: subscription inactive")
            await query.message.reply_text("–ü—Ä–µ–º–∏—É–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—Ñ–æ—Ä–º–∏—Ç–µ /subscribe, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ–Ω—É—Å.")
            return TOUR_FORWARD_1
    except Exception:
        print("[WARN] premium_add_pool_callback: failed to check subscription")
    # –£—Å—Ç–∞–Ω–æ–≤–∏–º —Ñ–ª–∞–≥–∏ –ø—Ä–µ–º–∏—É–º-—Ä–µ–∂–∏–º–∞: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø—É–ª (–±–µ–∑ –∞–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–∞–≤)
    context.user_data['premium_extra_available'] = True
    context.user_data['premium_mode'] = 'add_to_pool'
    print("[DEBUG] premium_add_pool_callback: premium_extra_available=True set")
    # –£–¥–∞–ª–∏–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∏–≥—Ä–æ–∫–æ–≤, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
    try:
        chat_id = context.user_data.get('last_choice_chat_id')
        msg_id = context.user_data.get('last_choice_message_id')
        if chat_id and msg_id:
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
            print(f"[DEBUG] premium_add_pool_callback: deleted last choice message id={msg_id}")
            # –û—á–∏—Å—Ç–∏–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            context.user_data.pop('last_choice_chat_id', None)
            context.user_data.pop('last_choice_message_id', None)
    except Exception:
        print("[WARN] premium_add_pool_callback: failed to delete last choice message")
    # –¢–∞–∫–∂–µ —É–¥–∞–ª–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–º–æ–π –ø—Ä–µ–º–∏—É–º-–∫–Ω–æ–ø–∫–æ–π
    try:
        await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
        print(f"[DEBUG] premium_add_pool_callback: deleted premium button message id={query.message.message_id}")
    except Exception:
        print("[WARN] premium_add_pool_callback: failed to delete premium button message")
    await query.message.reply_text("üíé –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: +1 –∏–≥—Ä–æ–∫ –≤ –ø—É–ª.\n\n–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–≥—Ä–æ–∫–∞")
    return PREMIUM_TEAM


async def premium_team_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –∏ –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é
    team_text = update.message.text.strip()
    context.user_data['premium_team_query'] = team_text
    try:
        print(f"[DEBUG] premium_team_input: received team text='{team_text}'")
    except Exception:
        pass
    from telegram import InlineKeyboardMarkup, InlineKeyboardButton
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton('–Ω–∞–ø–∞–¥–∞—é—â–∏–π', callback_data='premium_pos_–Ω–∞–ø–∞–¥–∞—é—â–∏–π')],
        [InlineKeyboardButton('–∑–∞—â–∏—Ç–Ω–∏–∫', callback_data='premium_pos_–∑–∞—â–∏—Ç–Ω–∏–∫')],
        [InlineKeyboardButton('–≤—Ä–∞—Ç–∞—Ä—å', callback_data='premium_pos_–≤—Ä–∞—Ç–∞—Ä—å')],
    ])
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞', reply_markup=kb)
    return PREMIUM_POSITION


async def premium_position_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    pos = data.replace('premium_pos_', '')
    context.user_data['premium_position'] = pos
    print(f"[DEBUG] premium_position_selected: pos={pos}")
    # –ü–æ–∫–∞–∂–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–º–∞–Ω–¥–µ –∏ –ø–æ–∑–∏—Ü–∏–∏ (–ò–ó –í–°–ï–ô –ë–ê–ó–´ –ò–ì–†–û–ö–û–í)
    try:
        team_text = (context.user_data.get('premium_team_query') or '').strip().lower()
        from db import get_all_players
        all_players = get_all_players()  # (id, name, position, club, nation, age, price)
        budget = context.user_data.get('tour_budget', 0)
        spent = context.user_data.get('tour_selected', {}).get('spent', 0)
        left = max(0, budget - spent)
        # –ò—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º
        selected = context.user_data.get('tour_selected', {})
        exclude_ids = []
        next_state = TOUR_FORWARD_1
        if pos == '–Ω–∞–ø–∞–¥–∞—é—â–∏–π':
            exclude_ids = selected.get('forwards', [])
            next_state = TOUR_FORWARD_1
        elif pos == '–∑–∞—â–∏—Ç–Ω–∏–∫':
            exclude_ids = selected.get('defenders', [])
            # –í—ã–±–µ—Ä–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
            next_state = TOUR_DEFENDER_1 if len(exclude_ids) == 0 else TOUR_DEFENDER_2
        elif pos == '–≤—Ä–∞—Ç–∞—Ä—å':
            gid = selected.get('goalie')
            exclude_ids = [gid] if gid else []
            next_state = TOUR_GOALIE
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∑–∏—Ü–∏–∏, –∫–æ–º–∞–Ω–¥–µ, –±—é–¥–∂–µ—Ç—É –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º
        def team_match(t):
            try:
                return team_text in str(t or '').lower()
            except Exception:
                return False
        # –ò—Å–∫–ª—é—á–∏–º –∏–≥—Ä–æ–∫–æ–≤, —É–∂–µ –≤–∫–ª—é—á—ë–Ω–Ω—ã—Ö –≤ —Ç—É—Ä–æ–≤—ã–π —Ä–æ—Å—Ç–µ—Ä
        tour_roster = context.user_data.get('tour_roster', [])
        tour_ids = set([tr[1] for tr in tour_roster])  # p.id –∏–∑ —Ç—É—Ä–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞
        # –ò–Ω–¥–µ–∫—Å—ã –≤ players: 0-id,1-name,2-position,3-club,6-price
        filtered = [
            p for p in all_players
            if p[2].lower() == pos
            and p[0] not in exclude_ids
            and p[0] not in tour_ids
            and (p[6] or 0) <= left
            and team_match(p[3])
        ]
        print(f"[DEBUG] premium_position_selected: team='{team_text}', found={len(filtered)} players in DB (excluding tour roster), left={left}")
        if not filtered:
            await query.message.reply_text("–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ò–∑–º–µ–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –ø–æ–∑–∏—Ü–∏—é.")
            return next_state
        # –ü–æ—Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        from telegram import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = []
        for p in filtered:
            btn_text = f"{p[1]} ‚Äî {p[6]} HC"
            keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"pick_{p[0]}_{pos}")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        text = f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ ({pos}, –∫–æ–º–∞–Ω–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç: '{team_text}') ‚Äî –æ—Å—Ç–∞–ª–æ—Å—å HC: {left}"
        sent = await query.message.reply_text(text, reply_markup=reply_markup)
        # –°–æ—Ö—Ä–∞–Ω–∏–º, —á—Ç–æ–±—ã –º–æ—á—å —É–¥–∞–ª–∏—Ç—å –¥–∞–ª–µ–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        try:
            context.user_data['last_choice_chat_id'] = sent.chat_id
            context.user_data['last_choice_message_id'] = sent.message_id
        except Exception:
            pass
        return next_state
    except Exception as e:
        print(f"[ERROR] premium_position_selected building list: {e}")
        await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {e}")
        return TOUR_FORWARD_1

from telegram import InlineKeyboardMarkup, InlineKeyboardButton

async def send_player_choice(update, context, position, exclude_ids, next_state, budget):
    from telegram import InlineKeyboardMarkup, InlineKeyboardButton
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º message –¥–ª—è reply_text
    message = getattr(update, "effective_message", None)
    if message is None and hasattr(update, "message"):
        message = update.message
    elif message is None and hasattr(update, "callback_query"):
        message = update.callback_query.message
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç–µ—Ä
    roster = context.user_data['tour_roster']
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º
    players = [p for p in roster if p[3].lower() == position and p[1] not in exclude_ids and p[7] <= budget]
    if not players:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç HC –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        text = (
            'üö® –í—ã –ø—Ä–∏–≤—ã—Å–∏–ª–∏ –ø–æ—Ç–æ–ª–æ–∫ –∑–∞—Ä–ø–ª–∞—Ç. –ü–µ—Ä–µ—Å–æ–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–∞–≤, —á—Ç–æ–±—ã –≤–ø–∏—Å–∞—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç.'
        )
        keyboard = [
            [InlineKeyboardButton('–ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å —Å–æ—Å—Ç–∞–≤', callback_data='restart_tour')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await message.reply_text(text, reply_markup=reply_markup)
        return ConversationHandler.END
    keyboard = []
    for p in players:
        btn_text = f"{p[2]} ‚Äî {p[7]} HC"
        keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"pick_{p[1]}_{position}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = f"–í—ã–±–µ—Ä–∏—Ç–µ {position} (–æ—Å—Ç–∞–ª–æ—Å—å HC: {budget})"
    sent_msg = await message.reply_text(text, reply_markup=reply_markup)
    # –ó–∞–ø–æ–º–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º, —á—Ç–æ–±—ã –º–æ—á—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º-—Ä–µ–∂–∏–º–∞
    try:
        context.user_data['last_choice_chat_id'] = sent_msg.chat_id
        context.user_data['last_choice_message_id'] = sent_msg.message_id
    except Exception:
        pass
    return next_state
    keyboard = []
    for p in players:
        btn_text = f"{p[2]} ‚Äî {p[7]} HC"
        keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"pick_{p[1]}_{position}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = f"–í—ã–±–µ—Ä–∏—Ç–µ {position} (–æ—Å—Ç–∞–ª–æ—Å—å HC: {budget})"
    await message.reply_text(text, reply_markup=reply_markup)
    return next_state

async def tour_forward_1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    budget = context.user_data['tour_budget']
    picked = context.user_data['tour_selected']['forwards']
    return await send_player_choice(update, context, '–Ω–∞–ø–∞–¥–∞—é—â–∏–π', picked, TOUR_FORWARD_2, budget)


async def tour_forward_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        data = query.data
        print(f"Callback data: {data}", flush=True)
        # –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç pick_<player_id>_–Ω–∞–ø–∞–¥–∞—é—â–∏–π
        if not data.startswith('pick_') or '_–Ω–∞–ø–∞–¥–∞—é—â–∏–π' not in data:
            await query.edit_message_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.')
            return TOUR_FORWARD_1
        pid = int(data.split('_')[1])
        # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ –ø–æ id
        roster = context.user_data['tour_roster']
        player = next((p for p in roster if p[1] == pid), None)
        added_personal = False
        if not player:
            # Fallback: –∏—â–µ–º –≤ –æ–±—â–µ–π –ë–î –∏–≥—Ä–æ–∫–æ–≤
            try:
                pdb = db.get_player_by_id(pid)
                if pdb:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ —Ñ–æ—Ä–º–∞—Ç—É: (tr.cost, p.id, p.name, p.position, p.club, p.nation, p.age, p.price)
                    player = (pdb[6], pdb[0], pdb[1], pdb[2], pdb[3], pdb[4], pdb[5], pdb[6])
                    # –î–æ–±–∞–≤–∏–º —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç—É—Ä–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
                    try:
                        if not any(p_[1] == pdb[0] for p_ in roster):
                            context.user_data['tour_roster'].append(player)
                        added_personal = True
                        # –ü–æ–º–µ—Ç–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–º–∏—É–º-–±–æ–Ω—É—Å–∞
                        context.user_data['premium_extra_available'] = False
                    except Exception:
                        pass
                else:
                    await query.edit_message_text('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
                    return TOUR_FORWARD_1
            except Exception:
                await query.edit_message_text('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
                return TOUR_FORWARD_1
        # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—É–ª ‚Äî –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ—Å—Ç–∞–≤, –∞ —Ç–æ–ª—å–∫–æ —Ä–∞—Å—à–∏—Ä—è–µ–º –ø—É–ª
        if context.user_data.get('premium_mode') == 'add_to_pool':
            try:
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–≥—Ä–æ–∫ –µ—Å—Ç—å –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º –ø—É–ª–µ
                roster = context.user_data['tour_roster']
                if not any(p_[1] == player[1] for p_ in roster):
                    context.user_data['tour_roster'].append(player)
                # –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –∏ —Å–∂–∏–≥–∞–µ–º –±–æ–Ω—É—Å
                context.user_data['premium_mode'] = None
                context.user_data['premium_extra_available'] = False
                # –ü–æ–∫–∞–∂–µ–º –æ–±—ã—á–Ω—ã–π –≤—ã–±–æ—Ä –Ω–∞–ø–∞–¥–∞—é—â–∏—Ö —Å —É—á—ë—Ç–æ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—É–ª–∞
                budget = context.user_data['tour_budget']
                spent = context.user_data['tour_selected']['spent']
                left = budget - spent
                picked = context.user_data['tour_selected']['forwards']
                await query.edit_message_text(f"–î–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –ø—É–ª: {player[2]} ({player[4]}). –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∞–¥–∞—é—â–µ–≥–æ.")
                next_state = TOUR_FORWARD_2 if len(picked) == 0 else TOUR_FORWARD_3
                return await send_player_choice(update, context, '–Ω–∞–ø–∞–¥–∞—é—â–∏–π', picked, next_state, left)
            except Exception as e:
                await query.edit_message_text(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—É–ª: {e}")
                return TOUR_FORWARD_1
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—é–¥–∂–µ—Ç
        budget = context.user_data['tour_budget']
        spent = context.user_data['tour_selected']['spent']
        if spent + player[7] > budget:
            await query.edit_message_text(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ HC –¥–ª—è –≤—ã–±–æ—Ä–∞ {player[1]}!')
            return TOUR_FORWARD_1
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
        context.user_data['tour_selected']['forwards'].append(pid)
        context.user_data['tour_selected']['spent'] += player[7]
        left = budget - context.user_data['tour_selected']['spent']
        player_name = escape_md(str(player[2]))
        cost = escape_md(str(player[7]))
        left_str = escape_md(str(left))
        msg = f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {player_name} \\({cost}\\)\n\n*–û—Å—Ç–∞–≤—à–∏–π—Å—è –±—é–¥–∂–µ—Ç: {left_str}*'
        await query.edit_message_text(msg, parse_mode="MarkdownV2")
        if len(context.user_data['tour_selected']['forwards']) == 1:
            print("tour_forward_callback SUCCESS: –ø–µ—Ä–µ—Ö–æ–¥ –∫ tour_forward_2", flush=True)
            return await tour_forward_2(update, context)
        elif len(context.user_data['tour_selected']['forwards']) == 2:
            print("tour_forward_callback SUCCESS: –ø–µ—Ä–µ—Ö–æ–¥ –∫ tour_forward_3", flush=True)
            return await tour_forward_3(update, context)
        elif len(context.user_data['tour_selected']['forwards']) == 3:
            print("tour_forward_callback SUCCESS: –ø–µ—Ä–µ—Ö–æ–¥ –∫ tour_defender_1", flush=True)
            await tour_defender_1(update, context)
            return TOUR_DEFENDER_1
    except Exception as e:
        print(f"tour_forward_callback ERROR: {e}", flush=True)
        logger.exception("Exception in tour_forward_callback")
        await query.edit_message_text(f"–û—à–∏–±–∫–∞: {e}")
        return TOUR_FORWARD_1
    finally:
        print("tour_forward_callback FINISHED", flush=True)


async def tour_forward_2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    budget = context.user_data['tour_budget']
    spent = context.user_data['tour_selected']['spent']
    left = budget - spent
    picked = context.user_data['tour_selected']['forwards']
    return await send_player_choice(update, context, '–Ω–∞–ø–∞–¥–∞—é—â–∏–π', picked, TOUR_FORWARD_3, left)


async def tour_forward_3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    budget = context.user_data['tour_budget']
    spent = context.user_data['tour_selected']['spent']
    left = budget - spent
    picked = context.user_data['tour_selected']['forwards']
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ –Ω–∞–ø–∞–¥–∞—é—â–µ–≥–æ, next_state ‚Äî TOUR_FORWARD_3
    return await send_player_choice(update, context, '–Ω–∞–ø–∞–¥–∞—é—â–∏–π', picked, TOUR_FORWARD_3, left)

async def tour_defender_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        data = query.data
        print(f"Callback data: {data}", flush=True)
        # –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç pick_<player_id>_–∑–∞—â–∏—Ç–Ω–∏–∫
        if not data.startswith('pick_') or '_–∑–∞—â–∏—Ç–Ω–∏–∫' not in data:
            await query.edit_message_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.')
            return TOUR_DEFENDER_1
        pid = int(data.split('_')[1])
        roster = context.user_data['tour_roster']
        player = next((p for p in roster if p[1] == pid), None)
        added_personal = False
        if not player:
            # Fallback: –∏—â–µ–º –≤ –æ–±—â–µ–π –ë–î –∏–≥—Ä–æ–∫–æ–≤
            try:
                pdb = db.get_player_by_id(pid)
                if pdb:
                    player = (pdb[6], pdb[0], pdb[1], pdb[2], pdb[3], pdb[4], pdb[5], pdb[6])
                    try:
                        if not any(p_[1] == pdb[0] for p_ in roster):
                            context.user_data['tour_roster'].append(player)
                        added_personal = True
                        context.user_data['premium_extra_available'] = False
                    except Exception:
                        pass
                else:
                    await query.edit_message_text('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
                    return TOUR_DEFENDER_1
            except Exception:
                await query.edit_message_text('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
                return TOUR_DEFENDER_1
        # –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—É–ª ‚Äî –±–µ–∑ –∞–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–∞–≤
        if context.user_data.get('premium_mode') == 'add_to_pool':
            try:
                roster = context.user_data['tour_roster']
                if not any(p_[1] == player[1] for p_ in roster):
                    context.user_data['tour_roster'].append(player)
                context.user_data['premium_mode'] = None
                context.user_data['premium_extra_available'] = False
                budget = context.user_data['tour_budget']
                spent = context.user_data['tour_selected']['spent']
                left = budget - spent
                picked = context.user_data['tour_selected']['defenders']
                await query.edit_message_text(f"–î–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –ø—É–ª: {player[2]} ({player[4]}). –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞—â–∏—Ç–Ω–∏–∫–∞.")
                next_state = TOUR_DEFENDER_2
                return await send_player_choice(update, context, '–∑–∞—â–∏—Ç–Ω–∏–∫', picked, next_state, left)
            except Exception as e:
                await query.edit_message_text(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—É–ª: {e}")
                return TOUR_DEFENDER_1
        budget = context.user_data['tour_budget']
        spent = context.user_data['tour_selected']['spent']
        if spent + player[7] > budget:
            await query.edit_message_text(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ HC –¥–ª—è –≤—ã–±–æ—Ä–∞ {player[1]}!')
            return TOUR_DEFENDER_1
        context.user_data['tour_selected']['defenders'].append(pid)
        context.user_data['tour_selected']['spent'] += player[7]
        left = budget - context.user_data['tour_selected']['spent']
        player_name = escape_md(str(player[2]))
        cost = escape_md(str(player[7]))
        left_str = escape_md(str(left))
        msg = f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {player_name} \\({cost}\\)\n\n*–û—Å—Ç–∞–≤—à–∏–π—Å—è –±—é–¥–∂–µ—Ç: {left_str}*'
        await query.edit_message_text(msg, parse_mode="MarkdownV2")
        if len(context.user_data['tour_selected']['defenders']) == 1:
            print("tour_defender_callback SUCCESS: –ø–µ—Ä–µ—Ö–æ–¥ –∫ tour_defender_2", flush=True)
            return await tour_defender_2(update, context)
        elif len(context.user_data['tour_selected']['defenders']) == 2:
            print("tour_defender_callback SUCCESS: –ø–µ—Ä–µ—Ö–æ–¥ –∫ tour_goalie", flush=True)
            await tour_goalie(update, context)
            return TOUR_GOALIE
    except Exception as e:
        print(f"tour_defender_callback ERROR: {e}", flush=True)
        logger.exception("Exception in tour_defender_callback")
        await query.edit_message_text(f"–û—à–∏–±–∫–∞: {e}")
        return TOUR_DEFENDER_1
    finally:
        print("tour_defender_callback FINISHED", flush=True)


async def tour_defender_1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    budget = context.user_data['tour_budget']
    spent = context.user_data['tour_selected']['spent']
    left = budget - spent
    picked = context.user_data['tour_selected']['defenders']
    return await send_player_choice(update, context, '–∑–∞—â–∏—Ç–Ω–∏–∫', picked, TOUR_DEFENDER_2, left)

async def tour_defender_2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    budget = context.user_data['tour_budget']
    spent = context.user_data['tour_selected']['spent']
    left = budget - spent
    picked = context.user_data['tour_selected']['defenders']
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∑–∞—â–∏—Ç–Ω–∏–∫–∞, next_state ‚Äî TOUR_DEFENDER_2
    return await send_player_choice(update, context, '–∑–∞—â–∏—Ç–Ω–∏–∫', picked, TOUR_DEFENDER_2, left)

async def tour_goalie_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        data = query.data
        print(f"Callback data: {data}", flush=True)
        # –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç pick_<player_id>_–≤—Ä–∞—Ç–∞—Ä—å
        if not data.startswith('pick_') or '_–≤—Ä–∞—Ç–∞—Ä—å' not in data:
            await query.edit_message_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.')
            return TOUR_GOALIE
        pid = int(data.split('_')[1])
        roster = context.user_data['tour_roster']
        player = next((p for p in roster if p[1] == pid), None)
        added_personal = False
        if not player:
            # Fallback: –∏—â–µ–º –≤ –æ–±—â–µ–π –ë–î –∏–≥—Ä–æ–∫–æ–≤
            try:
                pdb = db.get_player_by_id(pid)
                if pdb:
                    player = (pdb[6], pdb[0], pdb[1], pdb[2], pdb[3], pdb[4], pdb[5], pdb[6])
                    try:
                        if not any(p_[1] == pdb[0] for p_ in roster):
                            context.user_data['tour_roster'].append(player)
                        added_personal = True
                        context.user_data['premium_extra_available'] = False
                    except Exception:
                        pass
                else:
                    await query.edit_message_text('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
                    return TOUR_GOALIE
            except Exception:
                await query.edit_message_text('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
                return TOUR_GOALIE
        # –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—É–ª ‚Äî –±–µ–∑ –∞–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–∞–≤
        if context.user_data.get('premium_mode') == 'add_to_pool':
            try:
                roster = context.user_data['tour_roster']
                if not any(p_[1] == player[1] for p_ in roster):
                    context.user_data['tour_roster'].append(player)
                context.user_data['premium_mode'] = None
                context.user_data['premium_extra_available'] = False
                budget = context.user_data['tour_budget']
                spent = context.user_data['tour_selected']['spent']
                left = budget - spent
                picked = []
                if context.user_data['tour_selected']['goalie']:
                    picked = [context.user_data['tour_selected']['goalie']]
                await query.edit_message_text(f"–î–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –ø—É–ª: {player[2]} ({player[4]}). –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—Ç–∞—Ä—è.")
                return await send_player_choice(update, context, '–≤—Ä–∞—Ç–∞—Ä—å', picked, TOUR_CAPTAIN, left)
            except Exception as e:
                await query.edit_message_text(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—É–ª: {e}")
                return TOUR_GOALIE
        budget = context.user_data['tour_budget']
        spent = context.user_data['tour_selected']['spent']
        if spent + player[7] > budget:
            await query.edit_message_text(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ HC –¥–ª—è –≤—ã–±–æ—Ä–∞ {player[1]}!')
            return TOUR_GOALIE
        context.user_data['tour_selected']['goalie'] = pid
        context.user_data['tour_selected']['spent'] += player[7]
        left = budget - context.user_data['tour_selected']['spent']
        player_name = escape_md(str(player[2]))
        cost = escape_md(str(player[7]))
        left_str = escape_md(str(left))
        msg = f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {player_name} \\({cost}\\)\n\n*–û—Å—Ç–∞–≤—à–∏–π—Å—è –±—é–¥–∂–µ—Ç: {left_str}*'
        await query.edit_message_text(msg, parse_mode="MarkdownV2")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–∞–ø –≤—ã–±–æ—Ä–∞ –∫–∞–ø–∏—Ç–∞–Ω–∞
        return await tour_captain(update, context)
    except Exception as e:
        print(f"tour_goalie_callback ERROR: {e}", flush=True)
        logger.exception("Exception in tour_goalie_callback")
        await query.edit_message_text(f"–û—à–∏–±–∫–∞: {e}")
        return TOUR_GOALIE
    finally:
        print("tour_goalie_callback FINISHED", flush=True)


async def tour_goalie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    budget = context.user_data['tour_budget']
    spent = context.user_data['tour_selected']['spent']
    left = budget - spent
    picked = []
    # –í—Ä–∞—Ç–∞—Ä—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω, –Ω–µ –Ω—É–∂–µ–Ω exclude –∫—Ä–æ–º–µ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
    if context.user_data['tour_selected']['goalie']:
        picked = [context.user_data['tour_selected']['goalie']]
    return await send_player_choice(update, context, '–≤—Ä–∞—Ç–∞—Ä—å', picked, TOUR_CAPTAIN, left)


async def tour_captain(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from telegram import InlineKeyboardMarkup, InlineKeyboardButton
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º message –¥–ª—è reply_text
    message = getattr(update, "effective_message", None)
    if message is None and hasattr(update, "message"):
        message = update.message
    elif message is None and hasattr(update, "callback_query"):
        message = update.callback_query.message

    selected = context.user_data['tour_selected']
    roster = context.user_data['tour_roster']
    # –°–æ–±–∏—Ä–∞–µ–º id –ø–æ–ª–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    field_ids = selected['forwards'] + selected['defenders']
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É –ø–æ –∏–≥—Ä–æ–∫–∞–º
    candidates = [p for p in roster if p[1] in field_ids]
    keyboard = [
        [InlineKeyboardButton(f"{p[2]} ({p[3]})", callback_data=f"pick_captain_{p[1]}")]
        for p in candidates
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = "–ù–∞–∑–Ω–∞—á—å –æ–¥–Ω–æ–≥–æ –ø–æ–ª–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–æ—Å—Ç–∞–≤–∞ –∫–∞–ø–∏—Ç–∞–Ω–æ–º. –ï–≥–æ –∏—Ç–æ–≥–æ–≤—ã–µ –æ—á–∫–∏ —É–º–Ω–æ–∂–∏–º –Ω–∞ 1.5"
    await message.reply_text(text, reply_markup=reply_markup)
    return TOUR_CAPTAIN

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞–ø–∏—Ç–∞–Ω–∞ ---
async def tour_captain_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from telegram import InlineKeyboardMarkup, InlineKeyboardButton
    query = update.callback_query
    await query.answer()
    data = query.data
    if not data.startswith('pick_captain_'):
        await query.edit_message_text('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞–ø–∏—Ç–∞–Ω–∞.')
        return TOUR_CAPTAIN
    captain_id = int(data.replace('pick_captain_', ''))
    selected = context.user_data['tour_selected']
    roster = context.user_data['tour_roster']
    field_ids = selected['forwards'] + selected['defenders']
    if captain_id not in field_ids:
        await query.edit_message_text('–ö–∞–ø–∏—Ç–∞–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–µ–≤—ã–º –∏–≥—Ä–æ–∫–æ–º –∏–∑ –≤–∞—à–µ–≥–æ —Å–æ—Å—Ç–∞–≤–∞!')
        return TOUR_CAPTAIN
    context.user_data['tour_selected']['captain'] = captain_id
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —ç–º–æ–¥–∑–∏
    # def custom_emoji_entity(emoji_id, offset):
    #     return MessageEntity(
    #         type=MessageEntityType.CUSTOM_EMOJI,
    #         offset=offset,
    #         length=1,  # ASCII-—Å–∏–º–≤–æ–ª
    #         custom_emoji_id=str(emoji_id)
    #     )

    def get_name(pid, captain=False):
        p = next((x for x in roster if x[1]==pid), None)
        if not p:
            return str(pid)
        base = f"{p[2]} ({p[4]})"
        if captain:
            return f"üèÖ {base}"
        return base

    def format_final_roster_md(goalie, defenders, forwards, captain, spent, budget):
        lines = [
            '*–í–∞—à –∏—Ç–æ–≥–æ–≤—ã–π —Å–æ—Å—Ç–∞–≤:*',
            '',
            escape_md(goalie),
            escape_md(defenders),
            escape_md(forwards),
            '',
            f'–ö–∞–ø–∏—Ç–∞–Ω: {escape_md(captain)}',
            f'–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: *{escape_md(str(spent))}*/*{escape_md(str(budget))}*'
        ]
        return '\n'.join(lines)

    goalie_str = get_name(selected['goalie'])
    defenders_str = f"{get_name(selected['defenders'][0])} - {get_name(selected['defenders'][1])}"
    forwards_str = (
        f"{get_name(selected['forwards'][0])} - "
        f"{get_name(selected['forwards'][1])} - "
        f"{get_name(selected['forwards'][2])}"
    )
    captain_str = get_name(captain_id)
    spent = selected['spent']
    budget = context.user_data.get('tour_budget', 0)

    user_id = update.effective_user.id
    tour_id = context.user_data.get('active_tour_id', 1)
    roster_dict = {
        'goalie': selected['goalie'],
        'defenders': selected['defenders'],
        'forwards': selected['forwards']
    }
    from db import save_user_tour_roster
    save_user_tour_roster(user_id, tour_id, roster_dict, captain_id, spent)

    text = format_final_roster_md(goalie_str, defenders_str, forwards_str, captain_str, spent, budget)
    keyboard = [[InlineKeyboardButton('–ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å —Å–æ—Å—Ç–∞–≤', callback_data='restart_tour')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup,
        parse_mode="MarkdownV2"
    )
    return ConversationHandler.END


async def restart_tour_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from db import get_active_tour, clear_user_tour_roster
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    active_tour = get_active_tour()
    if active_tour:
        tour_id = active_tour['id']
        clear_user_tour_roster(user_id, tour_id)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ —Å–æ—Å—Ç–∞–≤–∞ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /tour (ConversationHandler entry_point)
    await context.bot.send_message(chat_id=query.message.chat_id, text="/tour")
    return ConversationHandler.END

async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    from db import get_budget
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º message –¥–ª—è reply_text
    message = getattr(update, "effective_message", None)
    if message is None and hasattr(update, "message"):
        message = update.message
    elif message is None and hasattr(update, "callback_query"):
        message = update.callback_query.message
    budget = get_budget()
    budget_str = str(budget).replace("-", r"\-") if budget is not None else 'N/A'
    text = rf"""*–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:*

–°–æ–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É –∏–∑ 6 –∏–≥—Ä–æ–∫–æ–≤ \(3 –Ω–∞–ø–∞–¥–∞—é—â–∏—Ö, 2 –∑–∞—â–∏—Ç–Ω–∏–∫–∞, 1 –≤—Ä–∞—Ç–∞—Ä—å\) —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º\. –£ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å–≤–æ—è —Å—Ç–æ–∏–º–æ—Å—Ç—å \- 10, 30, 40 –∏–ª–∏ 50 –µ–¥–∏–Ω–∏—Ü\.

‚ö°Ô∏è –ù–∞–∑–Ω–∞—á—å –æ–¥–Ω–æ–≥–æ –ø–æ–ª–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å–æ—Å—Ç–∞–≤–∞ –∫–∞–ø–∏—Ç–∞–Ω–æ–º

*–í–∞—à –±—é–¥–∂–µ—Ç: {budget_str}*

–°–æ–±—Ä–∞—Ç—å —Å–æ—Å—Ç–∞–≤ \- /tour"""
    await message.reply_text(text, parse_mode="MarkdownV2")

async def hc(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º message –¥–ª—è reply_text
    message = getattr(update, "effective_message", None)
    if message is None and hasattr(update, "message"):
        message = update.message
    elif message is None and hasattr(update, "callback_query"):
        message = update.callback_query.message

    user = update.effective_user
    data = db.get_user_by_id(user.id)
    if data:
        await message.reply_text(f'üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {data[3]} HC')
    else:
        await message.reply_text(
            'üö´ –¢–µ–±—è –µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –≥–µ–Ω–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –§–µ–Ω—Ç–µ–∑–∏ –î—Ä–∞—Ñ—Ç –ö–•–õ\n\n'
            '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start ‚Äî –∏ –≤–ø–µ—Ä—ë–¥ –∫ —Å–±–æ—Ä–∫–µ —Å–æ—Å—Ç–∞–≤–∞!'
        )
