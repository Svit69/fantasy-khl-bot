from telegram import Update, InputFile
from telegram.ext import ContextTypes, ConversationHandler
from config import ADMIN_ID
import db
import os
from utils import is_admin, send_message_to_users, IMAGES_DIR, TOUR_IMAGE_PATH_FILE, logger

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ ---
ADD_NAME, ADD_POSITION, ADD_CLUB, ADD_NATION, ADD_AGE, ADD_PRICE = range(6)

async def add_player_start(update, context):
    if not await admin_only(update, context):
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏–≥—Ä–æ–∫–∞:")
    return ADD_NAME

async def add_player_name(update, context):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é (–Ω–∞–ø–∞–¥–∞—é—â–∏–π/–∑–∞—â–∏—Ç–Ω–∏–∫/–≤—Ä–∞—Ç–∞—Ä—å):")
    return ADD_POSITION

async def add_player_position(update, context):
    context.user_data['position'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–ª—É–±:")
    return ADD_CLUB

async def add_player_club(update, context):
    context.user_data['club'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Ü–∏—é:")
    return ADD_NATION

async def add_player_nation(update, context):
    context.user_data['nation'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç:")
    return ADD_AGE

async def add_player_age(update, context):
    context.user_data['age'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å:")
    return ADD_PRICE

async def add_player_price(update, context):
    context.user_data['price'] = update.message.text
    db.add_player(
        context.user_data['name'],
        context.user_data['position'],
        context.user_data['club'],
        context.user_data['nation'],
        int(context.user_data['age']),
        int(context.user_data['price'])
    )
    await update.message.reply_text("–ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!")
    return ConversationHandler.END

async def add_player_cancel(update, context):
    await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# --- –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ ---
async def list_players(update, context):
    if not await admin_only(update, context):
        return
    players = db.get_all_players()
    if not players:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø—É—Å—Ç.")
        return
    msg = "\n".join([f"{p[0]}. {p[1]} | {p[2]} | {p[3]} | {p[4]} | {p[5]} –ª–µ—Ç | {p[6]} HC" for p in players])
    await update.message.reply_text(msg)

async def find_player(update, context):
    if not await admin_only(update, context):
        return
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /find_player <id>")
        return
    player_id = int(context.args[0])
    player = db.get_player_by_id(player_id)
    if not player:
        await update.message.reply_text("–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    msg = f"{player[0]}. {player[1]} | {player[2]} | {player[3]} | {player[4]} | {player[5]} –ª–µ—Ç | {player[6]} HC"
    await update.message.reply_text(msg)

async def admin_only(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    user_id = update.effective_user.id if update.effective_user else None
    if not is_admin(user_id):
        await update.message.reply_text('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
        return False
    return True

async def send_tour_image(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –°—Ü–µ–Ω–∞—Ä–∏–π:
    1. –ê–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç /send_tour_image ‚Äî –±–æ—Ç –ø—Ä–æ—Å–∏—Ç –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É.
    2. –ê–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ ‚Äî –±–æ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç, —Å–æ–æ–±—â–∞–µ—Ç –æ–± —É—Å–ø–µ—Ö–µ.
    """
    if not await admin_only(update, context):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–µ –∞–¥–º–∏–Ω, –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ —Ñ–æ—Ç–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ


    if not update.message.photo:
        context.user_data['awaiting_tour_image'] = True
        chat_id = update.effective_chat.id
        debug_info = f"[DEBUG] /send_tour_image chat_id: {chat_id}, user_data: {context.user_data}"
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.')
        await update.message.reply_text(debug_info)
        logger.info(f"[DEBUG] –û–∂–∏–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∞ {update.effective_user.id}, user_data: {context.user_data}")
        return

    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –ø—Ä–∏—à–ª–æ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞


    if context.user_data.get('awaiting_tour_image'):
        logger.info(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ, user_data: {context.user_data}")
        try:
            photo = update.message.photo[-1]
            file = await photo.get_file()
            filename = f"tour_{photo.file_unique_id}.jpg"
            path = os.path.join(IMAGES_DIR, filename)
            await file.download_to_drive(path)
            with open(TOUR_IMAGE_PATH_FILE, 'w') as f:
                f.write(filename)
            context.user_data['awaiting_tour_image'] = False
            await update.message.reply_text(f'‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ `{filename}`. –û–Ω–∞ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /tour.')
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f'[DEBUG] –§–æ—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ {filename}')
            logger.info(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {path} (–æ—Ç {update.effective_user.id})")
        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ç—É—Ä–∞: {e}')
            await update.message.reply_text(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}')
        return

    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –ø—Ä–∏—à–ª–æ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞
    await update.message.reply_text('–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /send_tour_image, –∑–∞—Ç–µ–º —Ñ–æ—Ç–æ.')
    logger.info(f"–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç {update.effective_user.id}")

async def process_tour_image_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        photo = update.message.photo[-1]
        file = await photo.get_file()
        filename = f"tour_{photo.file_unique_id}.jpg"
        path = os.path.join(IMAGES_DIR, filename)
        await file.download_to_drive(path)
        with open(TOUR_IMAGE_PATH_FILE, 'w') as f:
            f.write(filename)
        await update.message.reply_text(f'‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ `{filename}`. –û–Ω–∞ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /tour.')
        logger.info(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {path} (–æ—Ç {update.effective_user.id})")
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ç—É—Ä–∞: {e}')
        await update.message.reply_text(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}')

async def addhc(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not await admin_only(update, context):
        return
    if len(context.args) != 2 or not context.args[1].isdigit():
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addhc @username 100')
        return
    username = context.args[0].lstrip('@')
    amount = int(context.args[1])
    user = db.get_user_by_username(username)
    if not user:
        await update.message.reply_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return
    db.update_hc_balance(user[0], amount)
    new_balance = db.get_user_by_id(user[0])[3]
    await context.bot.send_message(chat_id=user[0], text=f'üéâ –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} HC!\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} HC')
    await update.message.reply_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} HC.')

async def send_results(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not await admin_only(update, context):
        return
    users = db.get_all_users()
    if update.message.photo:
        photo = update.message.photo[-1]
        file = await photo.get_file()
        filename = f"results_{photo.file_unique_id}.jpg"
        path = os.path.join(IMAGES_DIR, filename)
        await file.download_to_drive(path)
        success, failed = await send_message_to_users(context.bot, users, photo_path=path, caption='üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—É—Ä–∞:')
        await update.message.reply_text(f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Ñ–æ—Ç–æ) —Ä–∞–∑–æ—Å–ª–∞–Ω—ã. –£—Å–ø–µ—à–Ω–æ: {success}, –æ—à–∏–±–∫–∏: {failed}')
    elif context.args:
        text = ' '.join(context.args)
        success, failed = await send_message_to_users(context.bot, users, text=f'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—É—Ä–∞:\n{text}')
        await update.message.reply_text(f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Ç–µ–∫—Å—Ç) —Ä–∞–∑–æ—Å–ª–∞–Ω—ã. –£—Å–ø–µ—à–Ω–æ: {success}, –æ—à–∏–±–∫–∏: {failed}')
    else:
        await update.message.reply_text('–ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.')
