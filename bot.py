import os
import logging
import asyncio

from telegram import (
    Update, InputFile, BotCommand,
    BotCommandScopeDefault, BotCommandScopeChat
)
from telegram.ext import (
    Application, CommandHandler, ContextTypes
)
import httpx

from config import TELEGRAM_TOKEN, ADMIN_ID
import db
from handlers import start, tour, hc

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

IMAGES_DIR = 'images'
TOUR_IMAGE_PATH_FILE = 'latest_tour.txt'

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin_only(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
        return False
    return True

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—É—Ä–∞
async def send_tour_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await admin_only(update, context):
        return

    if not update.message.photo:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –≤–º–µ—Å—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π.')
        return

    photo = update.message.photo[-1]
    file = await photo.get_file()
    filename = f"tour_{photo.file_unique_id}.jpg"
    path = os.path.join(IMAGES_DIR, filename)
    await file.download_to_drive(path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /tour
    with open(TOUR_IMAGE_PATH_FILE, 'w') as f:
        f.write(filename)

    users = db.get_all_users()
    success = 0
    failed = 0

    for user in users:
        try:
            await context.bot.send_photo(
                chat_id=user[0],
                photo=InputFile(path),
                caption='üèí –ù–æ–≤—ã–π —Ç—É—Ä! –°–æ—Å—Ç–∞–≤ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:'
            )
            success += 1
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
            failed += 1

    msg = (
        f'‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ `{filename}`.\n'
        f'üì§ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.'
    )
    if failed:
        msg += f'\n‚ö†Ô∏è –û—à–∏–±–∫–∏ —É {failed} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.'
    await update.message.reply_text(msg)

# –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ HC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def addhc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await admin_only(update, context):
        return

    if len(context.args) != 2 or not context.args[1].isdigit():
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addhc @username 100')
        return

    username = context.args[0].lstrip('@')
    amount = int(context.args[1])
    user = db.get_user_by_username(username)

    if not user:
        await update.message.reply_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return

    db.update_hc_balance(user[0], amount)
    new_balance = db.get_user_by_id(user[0])[3]

    await context.bot.send_message(
        chat_id=user[0],
        text=f'üéâ –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} HC!\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} HC'
    )
    await update.message.reply_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} HC.')

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–∞ (—Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
async def send_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await admin_only(update, context):
        return

    users = db.get_all_users()

    if update.message.photo:
        photo = update.message.photo[-1]
        file = await photo.get_file()
        filename = f"results_{photo.file_unique_id}.jpg"
        path = os.path.join(IMAGES_DIR, filename)
        await file.download_to_drive(path)

        for user in users:
            try:
                await context.bot.send_photo(chat_id=user[0], photo=InputFile(path), caption='üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—É—Ä–∞:')
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")

        await update.message.reply_text('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Ñ–æ—Ç–æ) —Ä–∞–∑–æ—Å–ª–∞–Ω—ã.')

    elif context.args:
        text = ' '.join(context.args)

        for user in users:
            try:
                await context.bot.send_message(chat_id=user[0], text=f'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—É—Ä–∞:\n{text}')
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ {user[0]}: {e}")

        await update.message.reply_text('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Ç–µ–∫—Å—Ç) —Ä–∞–∑–æ—Å–ª–∞–Ω—ã.')
    else:
        await update.message.reply_text('–ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.')

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
async def set_commands(app: Application):
    user_commands = [
        BotCommand("start", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
        BotCommand("tour", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Ç—É—Ä"),
        BotCommand("hc", "–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å HC"),
    ]
    await app.bot.set_my_commands(user_commands, scope=BotCommandScopeDefault())

    admin_commands = user_commands + [
        BotCommand("send_tour_image", "–†–∞–∑–æ—Å–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—É—Ä–∞ (–∞–¥–º–∏–Ω)"),
        BotCommand("addhc", "–ù–∞—á–∏—Å–ª–∏—Ç—å HC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∞–¥–º–∏–Ω)"),
        BotCommand("send_results", "–†–∞–∑–æ—Å–ª–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—É—Ä–∞ (–∞–¥–º–∏–Ω)"),
    ]
    await app.bot.set_my_commands(admin_commands, scope=BotCommandScopeChat(chat_id=ADMIN_ID))

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    db.init_db()
    os.makedirs(IMAGES_DIR, exist_ok=True)

    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('tour', tour))
    app.add_handler(CommandHandler('hc', hc))
    app.add_handler(CommandHandler('send_tour_image', send_tour_image))
    app.add_handler(CommandHandler('addhc', addhc))
    app.add_handler(CommandHandler('send_results', send_results))

    await set_commands(app)
    await app.run_polling()

if __name__ == '__main__':
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())




