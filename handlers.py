
from telegram import Update, InputFile, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from config import ADMIN_ID
import db
import os
from utils import is_admin, send_message_to_users, IMAGES_DIR, TOUR_IMAGE_PATH_FILE, logger

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ."""
    user = update.effective_user
    registered = db.register_user(user.id, user.username, user.full_name)
    if is_admin(user.id):
        keyboard = [["/tour", "/hc"], ["/send_tour_image", "/addhc", "/send_results"]]
        msg = (
            f'–ü—Ä–∏–≤–µ—Ç, {user.full_name}! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä Fantasy KHL.\n\n'
            '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/tour ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –Ω–∞ —Ç—É—Ä\n/hc ‚Äî –±–∞–ª–∞–Ω—Å HC\n/send_tour_image ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—É—Ä–∞\n/addhc ‚Äî –Ω–∞—á–∏—Å–ª–∏—Ç—å HC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n/send_results ‚Äî —Ä–∞–∑–æ—Å–ª–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—É—Ä–∞'
        )
    else:
        keyboard = [["/tour", "/hc"]]
        msg = (
            f'–ü—Ä–∏–≤–µ—Ç, {user.full_name}! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Fantasy KHL.\n\n'
            '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/tour ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –Ω–∞ —Ç—É—Ä\n/hc ‚Äî –±–∞–ª–∞–Ω—Å HC'
        )
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    if registered:
        await update.message.reply_text(msg, reply_markup=markup)
    else:
        await update.message.reply_text('–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!', reply_markup=markup)

async def tour(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—É—Ä–∞."""
    try:
        files = os.listdir(IMAGES_DIR)
        if not files:
            await update.message.reply_text('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—É—Ä–∞ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.')
            return
        latest = sorted(files)[-1]
        with open(os.path.join(IMAGES_DIR, latest), 'rb') as img:
            await update.message.reply_photo(photo=InputFile(img), caption='–°–æ—Å—Ç–∞–≤ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Ç—É—Ä:')
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—É—Ä–∞: {e}')
        await update.message.reply_text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.')

async def hc(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å HC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.effective_user
    data = db.get_user_by_id(user.id)
    if data:
        await update.message.reply_text(f'üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {data[3]} HC')
    else:
        await update.message.reply_text('–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')

# --- –ê–¥–º–∏–Ω—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

async def admin_only(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    user_id = update.effective_user.id if update.effective_user else None
    if not is_admin(user_id):
        await update.message.reply_text('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
        return False
    return True

async def send_tour_image(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—É—Ä–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    if not await admin_only(update, context):
        return
    if not update.message.photo:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –≤–º–µ—Å—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π.')
        return
    try:
        photo = update.message.photo[-1]
        file = await photo.get_file()
        filename = f"tour_{photo.file_unique_id}.jpg"
        path = os.path.join(IMAGES_DIR, filename)
        await file.download_to_drive(path)
        with open(TOUR_IMAGE_PATH_FILE, 'w') as f:
            f.write(filename)
        users = db.get_all_users()
        success, failed = await send_message_to_users(context.bot, users, photo_path=path, caption='üèí –ù–æ–≤—ã–π —Ç—É—Ä! –°–æ—Å—Ç–∞–≤ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:')
        msg = f'‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ `{filename}`.\nüì§ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.'
        if failed:
            msg += f'\n‚ö†Ô∏è –û—à–∏–±–∫–∏ —É {failed} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.'
        await update.message.reply_text(msg)
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –≤ send_tour_image: {e}')
        await update.message.reply_text(f'–û—à–∏–±–∫–∞: {e}')

async def addhc(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∏—Å–ª–∏—Ç—å HC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    if not await admin_only(update, context):
        return
    if len(context.args) != 2 or not context.args[1].isdigit():
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addhc @username 100')
        return
    username = context.args[0].lstrip('@')
    amount = int(context.args[1])
    user = db.get_user_by_username(username)
    if not user:
        await update.message.reply_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return
    db.update_hc_balance(user[0], amount)
    new_balance = db.get_user_by_id(user[0])[3]
    await context.bot.send_message(chat_id=user[0], text=f'üéâ –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} HC!\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} HC')
    await update.message.reply_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} HC.')

async def send_results(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞–∑–æ—Å–ª–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—É—Ä–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç)."""
    if not await admin_only(update, context):
        return
    users = db.get_all_users()
    if update.message.photo:
        photo = update.message.photo[-1]
        file = await photo.get_file()
        filename = f"results_{photo.file_unique_id}.jpg"
        path = os.path.join(IMAGES_DIR, filename)
        await file.download_to_drive(path)
        success, failed = await send_message_to_users(context.bot, users, photo_path=path, caption='üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—É—Ä–∞:')
        await update.message.reply_text(f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Ñ–æ—Ç–æ) —Ä–∞–∑–æ—Å–ª–∞–Ω—ã. –£—Å–ø–µ—à–Ω–æ: {success}, –æ—à–∏–±–∫–∏: {failed}')
    elif context.args:
        text = ' '.join(context.args)
        success, failed = await send_message_to_users(context.bot, users, text=f'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—É—Ä–∞:\n{text}')
        await update.message.reply_text(f'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Ç–µ–∫—Å—Ç) —Ä–∞–∑–æ—Å–ª–∞–Ω—ã. –£—Å–ø–µ—à–Ω–æ: {success}, –æ—à–∏–±–∫–∏: {failed}')
    else:
        await update.message.reply_text('–ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.')

async def admin_only(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id if update.effective_user else None
    if user_id != ADMIN_ID:
        await update.message.reply_text('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
        return False
    return True

async def send_tour_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await admin_only(update, context):
        return
    if not update.message.photo:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –≤–º–µ—Å—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π.')
        return
    try:
        photo = update.message.photo[-1]
        file = await photo.get_file()
        filename = f"tour_{photo.file_unique_id}.jpg"
        path = os.path.join(IMAGES_DIR, filename)
        await file.download_to_drive(path)
        with open('latest_tour.txt', 'w') as f:
            f.write(filename)
        users = db.get_all_users()
        success = 0
        failed = 0
        for user in users:
            try:
                await context.bot.send_photo(chat_id=user[0], photo=InputFile(path), caption='üèí –ù–æ–≤—ã–π —Ç—É—Ä! –°–æ—Å—Ç–∞–≤ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:')
                success += 1
            except Exception:
                failed += 1
        msg = f'‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ `{filename}`.\nüì§ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.'
        if failed:
            msg += f'\n‚ö†Ô∏è –û—à–∏–±–∫–∏ —É {failed} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.'
        await update.message.reply_text(msg)
    except Exception as e:
        await update.message.reply_text(f'–û—à–∏–±–∫–∞: {e}')

async def addhc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await admin_only(update, context):
        return
    if len(context.args) != 2 or not context.args[1].isdigit():
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addhc @username 100')
        return
    username = context.args[0].lstrip('@')
    amount = int(context.args[1])
    user = db.get_user_by_username(username)
    if not user:
        await update.message.reply_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return
    db.update_hc_balance(user[0], amount)
    new_balance = db.get_user_by_id(user[0])[3]
    await context.bot.send_message(chat_id=user[0], text=f'üéâ –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} HC!\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} HC')
    await update.message.reply_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} HC.')

async def send_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await admin_only(update, context):
        return
    users = db.get_all_users()
    if update.message.photo:
        photo = update.message.photo[-1]
        file = await photo.get_file()
        filename = f"results_{photo.file_unique_id}.jpg"
        path = os.path.join(IMAGES_DIR, filename)
        await file.download_to_drive(path)
        for user in users:
            try:
                await context.bot.send_photo(chat_id=user[0], photo=InputFile(path), caption='üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—É—Ä–∞:')
            except Exception:
                pass
        await update.message.reply_text('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Ñ–æ—Ç–æ) —Ä–∞–∑–æ—Å–ª–∞–Ω—ã.')
    elif context.args:
        text = ' '.join(context.args)
        for user in users:
            try:
                await context.bot.send_message(chat_id=user[0], text=f'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—É—Ä–∞:\n{text}')
            except Exception:
                pass
        await update.message.reply_text('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Ç–µ–∫—Å—Ç) —Ä–∞–∑–æ—Å–ª–∞–Ω—ã.')
    else:
        await update.message.reply_text('–ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.')